---
title: "Chapter 9 notes: Functionals (and functional programming introduction"
author: "Casey O'Hara"
format: 
  html:
    embed-resources: true
execute:
  message: !expr NA
  warning: false
editor: source
---

```{r}
library(rlang)
library(tidyverse)
library(purrr)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

**Introduction notes**

Functional *language* vs. functional programming *style*.  Traditional weak areas of functional languages (poorer performance, unpredictable memory usage) have been reduced in recent years.  Functional programming is complementary to object-oriented programming, the dominant paradigm of the last few decades.

## Functional programming languages

Two main features that generally define functional programming languages:

* **first-class** functions: functions are like any other data structure - assign to variables, store in lists, pass as arguments, return as a result of a function.
* **pure** functions as a requirement 
    * output only depends on inputs - run it twice with the same inputs, get exactly the same output (excludes random generators, system time, etc)
    * no side effects, like changing value of a global variable, writing to disk, or displaying to screen (excludes things like `print`, `write_csv`, `<-`)

NOTE: R does not require pure functions, so not a strict functional programming language.

* you don't *have* to write pure functions, but usually *should*

## Functional style

Decomposing a big problem into smaller pieces, then solving each piece with a function or combo of functions.  This section overview:

* Chapter 9: Functionals - functions that take another function as an argument (e.g., `lapply()`) as *input* - generalize a function that works for one input to work across many inputs
* Chapter 10: function factories - functions that create functions as *output*
* Chapter 11: function operators - functions that take functions as *input* and produce functions as *output*

Collectively, these are **higher-order functions**

# Functionals

## Introduction

**Functional** takes a function as an unput and returns a vector as output.  Easy example: tell the function a function, and it applies that function to a set of 1000 uniform random numbers:

```{r}
randomise <- function(f) f(runif(1e3))
randomise(mean)
#> [1] 0.506
randomise(mean)
#> [1] 0.501
randomise(sum)
#> [1] 489

```

Common use of functionals is as an alternative to loops.  Loops are not inherently slow in R - but they don't cleanly convey what should be done with the results.

## My first functional: `map()`

`purrr::map()` takes a vector and a function, and calls the function once for each element of the vector, and returns the results in a list.

> In other words, `map(1:3, f)` is equivalent to `list(f(1), f(2), f(3))`.

"Map" used in the mathematical sense, an operation that associates each element of a given set with one or more elements of a second set.  `map()` is essentially equivalent to `lapply()` - but the `map()` functions offer some additional helpers.

### Producing atomic vectors

`map()` always returns a list, which works because you can put anything into the list elements.  But for simpler cases, where the results are always a known atomic vector type, use a variant:  `map_chr`, `map_lgl`, `map_int`, `map_dbl` to return an atomic vector of that type.  Note that `sapply` and `vapply` can return atomic vectors - but a little less cleanly than the `map_x` variants.

### Anonymous functions and shortcuts

Create an inline anonymous function within map() - 

```{r}
map_dbl(mtcars, function(x) length(unique(x)))
#>  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb 
#>   25    3   27   22   22   29   30    2    2    3    6
```

or use the shortcut syntax - 

```{r}
map_dbl(mtcars, ~ length(unique(.x)))
#>  mpg  cyl disp   hp drat   wt qsec   vs   am gear carb 
#>   25    3   27   22   22   29   30    2    2    3    6
```

Use `.` (or better, `.x`) for one argument functions, `.x` and `.y` for two argument functions, and `..1`, `..2`, `..3`, etc, for functions with an arbitrary number of arguments.

Skipping over some of the other map stuff for now!

### Exercises

1. Use `as_mapper()` to explore how purrr generates anonymous functions for the integer, character, and list helpers. What helper allows you to extract attributes? Read the documentation to find out.

> [The `pluck()` helper extracts info about the object - and `as_mapper()` will take a vector (int, chr, list) and create a pluck function to access elements.  `attr_getter()` allows you to create a function to access the attributes.  E.g., `get_rownames <- attr_getter("row.names"); get_rownames(mtcars)`.  Or for another example, see this, where `attr_getter` helps create a compact inline function:]{.answer}

```{r}
# Define custom accessor function
get_class <- function(x) attr(x, "class")
pluck(mtcars, get_class)
#> [1] "data.frame"

# Use attr_getter() as a helper
pluck(mtcars, attr_getter("class"))
#> [1] "data.frame"
```


2. `map(1:3, ~ runif(2))` is a useful pattern for generating random numbers, but `map(1:3, runif(2))` is not. Why not? Can you explain why it returns the result that it does?

> [The first appropriately sets up an anonymous function using the tilde.  The second does not; and as_mapper() will interpret the `runif(2)` as a vector of two random numbers, instead of a function or formula, and create an extractor function instead, using the random numbers as indices.  According to the answer doc, it should return NULLs, but instead returns the original index; is this a change in default behavior of pluck (looks like default is still NULL) or map?]{.answer}

```{r}
as_mapper(runif(2))
# function (x, ...) 
# pluck_raw(x, list(0.833373410394415, 0.919780668802559), .default = NULL)
# <environment: 0x00000236c08b2cb0>
```


3. Use the appropriate `map()` function to:
    a. Compute the standard deviation of every column in a numeric data frame.
    b. Compute the standard deviation of every numeric column in a mixed data frame. (Hint: youâ€™ll need to do it in two steps.)
    c. Compute the number of levels for every factor in a data frame.

```{r}
map_dbl(mtcars, sd)
map_dbl(starwars %>% select(where(is.numeric)), sd, na.rm = TRUE)
map_int(palmerpenguins::penguins %>% select(where(is.factor)), ~length(levels(.x)))
```

>[The `select(where(is.xxx))` is different from the given answer, which uses `map_lgl` to create a vector of logical that identifies which columns are numeric/factor/whatever...]{.answer}

4. The following code simulates the performance of a t-test for non-normal data. Extract the p-value from each test, then visualise.

```{r}
trials <- map(1:100, ~ t.test(rpois(10, 10), rpois(7, 10)))
```

>[Each list element contains the model output for that trial... p.value is not an attribute, but it's also not the element itself; maybe just map across all of them and pull the p value out]{.answer}

```{r}
p <- map_dbl(trials, .f = ~.x[['p.value']]) ### or ~ .x$p.value
hist(p)
```

5. The following code uses a map nested inside another map to apply a function to every element of a nested list. Why does it fail, and what do you need to do to make it work?

```{r}
x <- list(
  list(1, c(3, 9)),
  list(c(3, 6), 7, c(4, 7, 6))
)

triple <- function(x) x * 3
```

```{r eval = FALSE}
map(x, map, .f = triple)
#> Error in .f(.x[[i]], ...): unused argument (function (.x, .f, ...)
#> {
#> .f <- as_mapper(.f, ...)
#> .Call(map_impl, environment(), ".x", ".f", "list")
#> })
```

>[Thinking that the `.f = triple` overrules the positional assignment of `map` as the desired function.  Might need to define that first one a little differently to make the .f thing explicit]{.answer}

```{r}
map(x, .f = ~ map(.x, .f = triple))
```

6. Use map() to fit linear models to the mtcars dataset using the formulas stored in this list:

```{r}
formulas <- list(
  mpg ~ disp,
  mpg ~ I(1 / disp),
  mpg ~ disp + wt,
  mpg ~ I(1 / disp) + wt
)
```

>[Here we want to apply the formulas in the list as the varying argument to the lm() function, with mtcars as the non-varying argument.  Because the outputs are linear model objects, use plain ol' `map()`.]{.answer}

```{r}
map(formulas, .f = ~lm(formula = .x, data = mtcars))
```

7. Fit the model `mpg ~ disp` to each of the bootstrap replicates of `mtcars` in the list below, then extract the 
R^2^ of the model fit (Hint: you can compute the R^2^ with `summary()`.)

```{r}
bootstrap <- function(df) {
  df[sample(nrow(df), replace = TRUE), , drop = FALSE]
}

bootstraps <- map(1:10, ~ bootstrap(mtcars))

mdls <- map(bootstraps, .f = ~lm(formula = mpg ~ disp, data = .x))

r2 <- map_dbl(mdls, .f = ~summary(.x)$adj.r.squared)

### or in a piped sequence:
bootstraps %>%
  map(~ lm(mpg ~ disp, data = .x)) %>%
  map(summary) %>%
  map_dbl("r.squared")
```

## Purrr style

Using purrr functions chained together to create multiple but simpler steps.  Here, split mtcars by cylinders then do a linear model for each of mpg as a function of wt, then extract the slopes.

```{r}
by_cyl <- split(mtcars, mtcars$cyl)

by_cyl %>% 
  map(~ lm(mpg ~ wt, data = .x)) %>% 
  map(coef) %>%  ### apply the coefficient function to each of the linear models
  map_dbl(2)     ### this one means, pluck index 2, i.e., the second coefficient, i.e., slope
#>     4     6     8 
#> -5.65 -2.78 -2.19
```

Using apply functions (in base R style, no pipes!) or a loop, probably fewer iterations with more going on in each iteration.

## Map variants

Vanilla `map()` has the four atomic variants `map_lgl`, `map_chr`, `map_int`, `map_dbl`.  But more variants:

* `modify()` for output type same as input type
* `map2()` for iterating over two inputs
* `imap()` for iterating using an index
* `walk()` to return nothing (i.e., function is used for side effects like writing a file)
* `pmap()` to iterate over any number of inputs

|                      |  List	|     Atomic    |	Same type |	Nothing  |
|:---                  |:------:|:-------------:|:----------:|:-------:|
| One argument       	 | map()	| map_lgl(), â€¦  | modify()	 | walk()  |
| Two arguments	       | map2()	| map2_lgl(), â€¦ | modify2()	 | walk2() |
| One argument + index | imap()	| imap_lgl(), â€¦ | imodify()	 | iwalk() |
| N arguments	         | pmap()	| pmap_lgl(), â€¦ |     â€”	     | pwalk() |

### Exercises

1. Explain the results of `modify(mtcars, 1)`.

> [Thinking the second argument, 1, is the "function", so it will pluck the first index of each column of mtcars... and then uses that to modify each element in the dataframe since the final structure needs to be the same as the initial structure.]{.answer}

2. Rewrite the following code to use `iwalk()` instead of `walk2()`. What are the advantages and disadvantages?

```{r}
temp <- tempfile(); dir.create(temp)
cyls <- split(mtcars, mtcars$cyl)
paths <- file.path(temp, paste0("cyl-", names(cyls), ".csv"))
walk2(cyls, paths, write.csv)
# list.files(temp)

names(cyls) <- paths 
iwalk(cyls, .f = ~write.csv(.x, .y))  ### .y is names(.x) which has been set to paths

unlink(temp, recursive = TRUE)
```

3. Explain how the following code transforms a data frame using functions stored in a list.

```{r}
trans <- list(
  disp = function(x) x * 0.0163871,
  am = function(x) factor(x, labels = c("auto", "manual"))
)

nm <- names(trans)
mtcars[nm] <- map2(trans, mtcars[nm], function(f, var) f(var))
```

> [`map2(trans, mtcars[nm]...)` will iterate over the two transforms according to the column name that matches the transforms.  The `function(f, var) f(var)` will receive `f` as the transform function and `var` as the variable to be transformed; then the function itself is defined as applying function `f` to variable `var`.]{.answer}

Compare and contrast the `map2()` approach to this `map()` approach:

```{r}
mtcars[nm] <- map(nm, ~ trans[[.x]](mtcars[[.x]]))
```

> [This version instead iterates over the names of the two transforms, then defines an anonymous function that applies the function in `trans[[.x]]` to the variable column `mtcars[[.x]]`.]{.answer}

4. What does `write.csv()` return, i.e. what happens if you use it with `map2()` instead of `walk2()`?

>[`write.csv()` returns NULL, so you'd end up with a bunch of NULL values instead of just not returning anything.]{.answer}

## Reduce family

Not seeing the value in this at the present, so skip and come back if it becomes interesting...

## Predicate functionals

A **predicate** is a function that returns a single `TRUE` or `FALSE` value, like `is.character()`, and a predicate **matches** a vector if it returns `TRUE`.

### Basics

A **predicate functional** applies a predicate to each element of a vector.  Seven functions in `purrr`:

* `some(.x, .p)`, `every(.x, .p)`, and `none(.x, .p)` return `TRUE` if any, all, or no elements match, respectively.
* `detect(.x, .p)` and `detect_index(.x, .p)` return the value (vector) and the index of the first match, respectively.
* `keep(.x, .p)` and `discard(.x, .p)` do their appropriate thing with all matching elements.

Example:

```{r}
df <- data.frame(x = 1:3, y = c("a", "b", "c"))
detect(df, is.factor)
#> NULL
detect_index(df, is.factor)
#> [1] 0
detect(df, is.character); detect_index(df, is.numeric)

str(keep(df, is.character))
#> 'data.frame':    3 obs. of  0 variables
str(discard(df, is.character))
#> 'data.frame':    3 obs. of  2 variables:
#>  $ x: int  1 2 3
#>  $ y: chr  "a" "b" "c"
```

Can use predicates in `map_if()` and `modify_if()` to transform only those elements that match the predicate.

### Exercises

1. Why isnâ€™t `is.na()` a predicate function? What base R function is closest to being a predicate version of `is.na()`?

> [`is.na()` returns a TRUE or FALSE for each element in a vector, not a single value.  Something like `any(is.na())` or `all(is.na())` would return a single value, more predicate-like.]{.answer}

2. `simple_reduce()` has a problem when `x` is length 0 or length 1. Describe the source of the problem and how you might go about fixing it.

```{r}
simple_reduce <- function(x, f) {
  out <- x[[1]]
  for (i in seq(2, length(x))) {
    out <- f(out, x[[i]])
  }
  out
}
```

>[The for loop will iterate over 2:0 or 2:1 for those values of x.  Could put a check to make sure length(x) is not 0 or 1, returning some appropriate value.]{.answer}

3. Implement the `span()` function from Haskell: given a list `x` and a predicate function `f`, `span(x, f)` returns the location of the longest sequential run of elements where the predicate is true. (Hint: you might find `rle()` helpful.)

```{r}
span <- function(x, p) {
  true_vec <- map(x, p)
  asdf <- rle(as.integer(true_vec))
}

x <- 1:20
p = function(x) {x %% 3 == 0 | x %% 4 == 0 | x %% 5 == 0}
```

4. Implement `arg_max()`. It should take a function and a vector of inputs, and return the elements of the input where the function returns the highest value. For example, `arg_max(-10:5, function(x) x ^ 2)` should return -10. `arg_max(-5:5, function(x) x ^ 2)` should return c(-5, 5). Also implement the matching `arg_min()` function.

```{r}
arg_max <- function(x, f) {
  y <- map_dbl(x, .f - f)
  return(x[y == max(y)])
}

arg_min <- function(x, f) {
  y <- map_dbl(x, .f - f)
  return(x[y == min(y)])
}
```


5. The function below scales a vector so it falls in the range [0, 1]. How would you apply it to every column of a data frame? How would you apply it to every numeric column in a data frame?

```{r}
scale01 <- function(x) {
  rng <- range(x, na.rm = TRUE)
  (x - rng[1]) / (rng[2] - rng[1])
}

mtcars_rescale <- modify_if(mtcars, is.numeric, scale01)
### fails on the `am` factor column otherwise

peng <- palmerpenguins::penguins
peng_rescale <- modify_if(peng, is.numeric, .f = scale01)

```

## Base functionals

Let's skip this one too - seems highly specialized in a way that I won't likely need
