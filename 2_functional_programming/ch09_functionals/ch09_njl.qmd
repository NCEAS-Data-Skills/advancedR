
```{r 09-libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(purrr)
```

### 9.1 Introduction

A **functional** takes a function as an input and returns a vector as output. Functionals are a less flexible--and thus more predictable--version of a `for` loop.

### 9.2 Hadley's First Funtional: `map`

`map`'s base R equivalent is `lapply`. All `map` variants use the convention that a function's suffix refers to the ouptut of the function (e.g., `map_dbl` returns a double vector).

#### 9.2.1 Producing Atomic Vectors

`map`'s more specific variants produces the same number of outputs as inputs and can't return inappropriate types (_sensu_ "class") of results.

`vapply` is the preferred base R equivalent to `map_*` when you want an atomic vectors. It is more verbose though (e.g., `map_dbl(x, mean, na.rm = T)` **==** `vapply(x, mean, na.rm = T, FUN.VALUE = double(1))`)

#### 9.2.2 Anonymous Functions & Shortcuts

`map` supports in-line anonymous functions (a.k.a. "lamda functions") or you can use a special syntax with `~`.

#### 9.2.3 Passing Arguments with `...`

`map` supports passing bonus arguments to `...`. Essentially, the first argument is `.x` (thing to iterate across), the second is `.f` (function to use on each element of `.x`), and all remaining argument/value pairs are assumed to be arguments of `.f`.

#### 9.2.4 Argument Names

It is kinder to readers of your code to specify _both_ the argument name and its value for any additional arguments passed to `map` (additional as in beyond `.x` and `.f`).

#### 9.2.5 Varying Another Argument

There's no shortcut to varying an argument other than the first when passing to `map` so you'd need to use a lambda function to reorder the arguments as they passed to the function assigned to `.f`.

#### 9.2.6 Exercises

1. Use `as_mapper()` to explore how `purrr` generates anonymous functions for the integer, character, and list helpers. What helper allows you to extract attributes? Read the documentation to find out.


2. `map(1:3, ~ runif(2))` is a useful pattern for generating random numbers, but `map(1:3, runif(2))` is not. Why not? Can you explain why it returns the result that it does?

[The non-shortcut version (i.e., the one lacking `~`) is not actually using the `runif` function and so just returns the integers passed to `.x` in `map`. This is because it is not using either the shortcut or the working non-shortcut syntax that `map` expects. If we revise that option into the non-shortcut syntax it should start working in the same way as the shorcut variant. See below for a demonstration of the approaches]{.answer}

```{r 09-map_q2}
# Shortcut
purrr::map(.x = 1:3, .f = ~ runif(n = 2))

# Useless
purrr::map(.x = 1:3, .f = runif(n = 2))

# Revised non-shortcut
purrr::map(.x = 1:3, .f = function(x) runif(n = 2))
```

3. Use the appropriate `map` function to:

> a. Compute the standard deviation of every column in a numeric data frame.

> b. Compute the standard deviation of every numeric column in a mixed data frame. (Hint: youâ€™ll need to do it in two steps.)

> c. Compute the number of levels for every factor in a data frame.

4. The following code simulates the performance of a t-test for non-normal data. Extract the p-value from each test, then visualise.

```{r 09-map_q4}
#| eval: false

trials <- purrr::map(.x = 1:100, .f = ~ t.test(rpois(10, 10), rpois(7, 10)))
```

5. The following code uses a `map` nested inside another `map` to apply a function to every element of a nested list. Why does it fail, and what do you need to do to make it work?

```{r 09-map_q5}
#| eval: false

x <- list(
  list(1, c(3, 9)),
  list(c(3, 6), 7, c(4, 7, 6))
)

triple <- function(x) x * 3
map(x, map, .f = triple)
#> Error in .f(.x[[i]], ...): unused argument (function (.x, .f, ...)
#> {
#> .f <- as_mapper(.f, ...)
#> .Call(map_impl, environment(), ".x", ".f", "list")
#> })
```

6. Use `map` to fit linear models to the mtcars dataset using the formulas stored in this list:

```{r 09-map_q6}
#| eval: false

formulas <- list(
  mpg ~ disp,
  mpg ~ I(1 / disp),
  mpg ~ disp + wt,
  mpg ~ I(1 / disp) + wt
)
```

7. Fit the model `mpg ~ disp` to each of the bootstrap replicates of mtcars in the list below, then extract the R^2^ of the model fit (Hint: you can compute the R^2^ with `summary`.)

```{r 09-map_q7}
#| eval: false

bootstrap <- function(df) {
  df[sample(nrow(df), replace = TRUE), , drop = FALSE]
}

bootstraps <- purrr::map(.x = 1:10, .f = ~ bootstrap(mtcars))
```

### 9.3 `purrr` Style

This section of the book shows a nice example of how `purrr` can be used to replace a relatively complex series of operations (that could be a moderately complex `for` loop instead)

### 9.4 `map` Variants

There are 23 types of `map` variant. There's a neat summary table of how these differ based on the number and type of inputs and outputs [here](https://adv-r.hadley.nz/functionals.html#map-variants).

#### 9.4.1 Same Type of Input/Output: `modify`

`modify` ensures the output is the same type as the input (e.g., `map` across columns of a dataframe returns a list while `modify` returns another dataframe).

#### 9.4.2 Two inputs: `map2` & Friends

`map2` accepts two inputs and will recycle them as needed to ensure that both are the same length.

#### 9.4.3 No outputs: `walk` & Friends

`walk` is called for "side-effects"--like saving something to disk--which can be a nice alternative to returning `NULL`.

#### 9.4.4 Iterating Over Values & Indices

`imap` is like `map` except that it iterates across values and indices in parallel.

#### 9.4.5 Any Number of Inputs: `pmap` & Friends

`pmap` supports more varying arguments than `map2` and allows the user a greater degree of control because you can name the components of the input list.

#### 9.4.6 Exercises

1. Explain the results of `modify(mtcars, 1)`.

2. Rewrite the following code to use `iwalk` instead of `walk2`. What are the advantages and disadvantages?

```{r 09-map-vars-q2}
#| eval: false

cyls <- split(mtcars, mtcars$cyl)
paths <- file.path(temp, paste0("cyl-", names(cyls), ".csv"))
walk2(cyls, paths, write.csv)
```

3. Explain how the following code transforms a data frame using functions stored in a list. Then compare and contrast the `map2` approach to the provided `map` approach.

```{r 09-map-vars-q2}
#| eval: false

# First code bit:
trans <- list(
  disp = function(x) x * 0.0163871,
  am = function(x) factor(x, labels = c("auto", "manual"))
)

nm <- names(trans)
mtcars[nm] <- map2(trans, mtcars[nm], function(f, var) f(var))


# `map` approach:
mtcars[nm] <- map(nm, ~ trans[[.x]](mtcars[[.x]]))
```

4. What does `write.csv` return, i.e. what happens if you use it with `map2` instead of `walk2`?


### 9.5 `reduce` Family

#### 9.5.1 Basics

`reduce` calls a function on a pair of values from the input vector at a time. Angel Chen had a nice use-case of this where you could `join` a series of dataframes by the same set of index columns in one step rather than several separate pairwise joins.

#### 9.5.2 Accumulate

`accumulate` is a variant of `reduce` where the product of each pair of inputs is sequentially stored as elements of a list. Looking "down" the list shows the intermediaries that `reduce` silently skips.

#### 9.5.3 Output Types

If the input vector is length 0 you will get an error unless you specify the `.init` argument (in which case that value will be returned).

#### 9.5.4 Multiple Inputs

`reduce2` allows specification of a second input that varies with each pairwise step inside `reduce`. This means the second input should have one fewer element than the first.

#### 9.5.5 Map-Reduce

You could combine `map` and `reduce` to separately compute useful summary values across multiple datasets (perhaps required due to computer memory limits) and then invoke `reduce` to simplify to a single output.

### 9.6 Predicate Functionals

A "predicate" is a function that retuns a single `TRUE` or `FALSE` (e.g., `is.null`).

#### 9.6.1 Basics

A predicate functional applies a predicate to each element of a vector. These include `some`, `every`, and `none`. They _can_ be replaced with combinations of normal predicates and `all` or `any` but these `purrr` predicates terminate early as soon as the first condition that would determine the overall decision  is found (e.g., first `F` in `all`) which makes them more computationally efficient than the base equivalents.

#### 9.6.2 Map Variants

`map_if` and `modify_if` are variants of those functions that invoke a predicate function before the function they "actually" want to use.

#### 9.6.3 Exercises

1. Why isn't `is.na` a predicate function? What base R function is closest to being a predicate version of `is.na`?

2. `simple_reduce` (see below) has a problem when `x` is length 0 or length 1. Describe the source of the problem and how you might go about fixing it.

```{r 09-predicate-q2}
#| eval: false

simple_reduce <- function(x, f) {
  out <- x[[1]]
  for (i in seq(2, length(x))) {
    out <- f(out, x[[i]])
  }
  out
}
```

3. Implement the `span` function from Haskell: given a list `x` and a predicate function `f`, `span(x, f)` returns the location of the longest sequential run of elements where the predicate is true. (Hint: you might find `rle` helpful.)

4. Implement `arg_max`. It should take a function and a vector of inputs, and return the elements of the input where the function returns the highest value. For example, `arg_max(-10:5, function(x) x ^ 2)` should return -10. `arg_max(-5:5, function(x) x ^ 2)` should return `c(-5, 5)`. Also implement the matching `arg_min` function.

5. The function below scales a vector so it falls in the range [0, 1]. How would you apply it to every column of a data frame? How would you apply it to every numeric column in a data frame?

```{r 09-predicate-q5}
#| eval: false

scale01 <- function(x) {
  rng <- range(x, na.rm = TRUE)
  (x - rng[1]) / (rng[2] - rng[1])
}
```

### 9.7 Base Functionals

Some functionals in base R lack equivalents in `purrr`. This section is dedicated to them.

#### 9.7.1 Matrices & Arrays

`apply` is specialized to work on 2+-dimensional vectors (i.e., matrices/arrays). Just like `sapply`, you have no control over output type so you may get unpredictable results. However, because `apply` is mostly used on numeric arrays you are less likely to encounter problems. **Do not use `apply` on dataframes because it will coerce them to a matrix** which is undesirable if you have anything other than numbers stored in it.

#### 9.7.2 Mathematical Concerns

`integrate` finds the area under the curve defined by `f`, `uniroot` finds where `f` intersects 0, and `optimise` finds the lowest/highest value of `f`.

#### 9.7.3 Exercises

1. How does `apply` arrange the output? Read the documentation and perform some experiments.

2. What do `eapply` and `rapply` do? Does `purrr` have equivalents?

3. Challenge: read about the fixed point algorithm. Complete the exercises using R.
