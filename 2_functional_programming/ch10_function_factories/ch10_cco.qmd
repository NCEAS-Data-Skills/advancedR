---
title: "Chapter 10 notes: function factories"
author: "Casey O'Hara"
format: 
  html:
    embed-resources: true
execute:
  message: !expr NA
editor: source
---

```{r}
library(rlang)
library(ggplot2)
library(scales)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

# Function factories

## Intro

Function factory is a function that makes functions - takes some inputs and returns a function.

Function factories are an important building block for function operators (chapter 11).

## Factory fundamentals

### Environments

```{r example function factory}
power1 <- function(exp) {
  function(x) {
    x ^ exp
  }
}

square <- power1(2)
cube <- power1(3)

square
# function(x) {
#     x ^ exp
#   }
# <environment: 0x7fa49978e748>
```

Examining the resulting function: obvious where `x` comes from, but where does `exp` come from?

> The enclosing environment of the manufactured function is an execution environment of the function factory.

So next examine the enclosing environment of the manufactured function:

```{r}
env_print(square); env_print(cube)

# <environment: 0x7fa49978e748>
# Parent: <environment: global>
# Bindings:
# • exp: <lazy>
# <environment: 0x7fa49978dda8>
# Parent: <environment: global>
# Bindings:
# • exp: <lazy>
```

Both environments have bindings to `exp` - next let's see those values!

```{r}
fn_env(square)$exp
fn_env(cube)$exp
```

The names in the enclosing environments are bound to different values.  So our functions find `x` in the execution environment and `exp` in the enclosing environment.

### Forcing evaluation

But this introduces a small bug caused by lazy evaluation - note:
```{r}
x <- 2
square <- power1(x)
x <- 3

square(2)
```

`x` is only evaluated lazily when `square()` is run, not when it is created (by running `power1()`).  The binding of `x` changed between the creation of the function and the calling of the function.  Not a common problem, but would be fucking confusing.  So force evaluation using `force()`:

```{r}
power2 <- function(exp) {
  force(exp)
  function(x) {
    x ^ exp
  }
}

x <- 2
square <- power2(x)
x <- 3
square(2)
#> [1] 4
```

### Stateful functions

* The enclosing environment of the manufactured function is unique and constant.
* We can use the superassignment operator, `<<-`, to change bindings in the enclosing environment.

Example:

```{r}
new_counter <- function() {
  i <- 0
  
  function() {
    i <<- i + 1
    i
  }
}

counter_one <- new_counter()
counter_two <- new_counter()

for(i in 1:3) print(counter_one())
counter_one()
counter_two()
```

Because `counter_one()` and `counter_two()` have separate enclosing environments, the value of `i` in each is independent.

NOTE: If your function starts managing the state of multiple variables, it's best to switch to R6 objects, chapter 14.

### Garbage collection

Regular functions drop their environments after being run, so large temp objects get cleaned up.  But manufactured functions hold on to their execution environments, so temp objects remain in memory (not actually temporary!) - use `rm()` to clean those up when done.

### Exercises

1. The definition of `force()` is simple (see below). Why is it better to `force(x)` instead of just `x`?

```{r}
force
#> function (x) 
#> x
#> <bytecode: 0x7fe8519464b0>
#> <environment: namespace:base>
```

>[`force(x)` will evaluate x immediately, which avoids lazy eval problems; but `force(x)` communicates that it's intentional, rather than just typing `x`.]{.answer}

2. Base R contains two function factories, `approxfun()` and `ecdf()`. Read their documentation and experiment to figure out what the functions do and what they return.

>[]{.answer}

3.  Create a function `pick()` that takes an index, `i`, as an argument and returns a function with an argument `x` that subsets `x` with `i`.

```{r}
pick <- function(i) {
  pick_out <- function(x) return(x[[i]])
  return(pick_out)
}
```


```{r}
pick(1)(x)
# should be equivalent to
x[[1]]

lapply(mtcars, pick(5))
# should be equivalent to
lapply(mtcars, function(x) x[[5]])
```

4. Create a function that creates functions that compute the i^th^ central moment of a numeric vector. You can test it by running the following code:

```{r}
moment <- function(i) {
  centr_mom_i <- function(x) {
    return(mean((x - mean(x))^i))
  }
}
```


```{r}
m1 <- moment(1)
m2 <- moment(2)

x <- runif(100)
stopifnot(all.equal(m1(x), 0))
stopifnot(all.equal(m2(x), var(x) * 99 / 100))
```


5. What happens if you don’t use a closure? Make predictions, then verify with the code below.

```{r}
i <- 0
new_counter2 <- function() {
  i <<- i + 1
  i
}
```

>[Here we are just updating `i` in the global environment which might be risky.]{.answer}

6. What happens if you use `<-` instead of `<<-`? Make predictions, then verify with the code below.

```{r}
new_counter3 <- function() {
  i <- 0
  function() {
    i <- i + 1
    i
  }
}

x <- new_counter3()
for(i in 1:3) print(x())
```

>[Here, the manufactured function only updates i within itself, rather than in the enclosing environment, so the counter will continually return 1.]{.answer}

## Graphical factories

### labeling

scales package provides function factories - which you can pass to the `labels` argument of `scale_XXX_YYY()`: 

```{r}
y <- c(12345, 123456, 1234567)
df <- data.frame(x = 1, y = y)
core <- ggplot(df, aes(x, y)) + 
  geom_point() + 
  scale_x_continuous(breaks = 1, labels = NULL) +
  labs(x = NULL, y = NULL)
  
core
core + scale_y_continuous(
  labels = comma_format()
)
core + scale_y_continuous(
  labels = number_format(scale = 1e-3, suffix = " K")
)
core + scale_y_continuous(
  labels = scientific_format()
)
```

### geom_histogram

binwidth can accept a function!

```{r}
# construct some sample data with very different numbers in each cell
sd <- c(1, 5, 15)
n <- 100

df <- data.frame(x = rnorm(3 * n, sd = sd), sd = rep(sd, n))

ggplot(df, aes(x)) + 
  geom_histogram(binwidth = 2) + 
  facet_wrap(~ sd, scales = "free_x") + 
  labs(x = NULL)
```

```{r}
binwidth_bins <- function(n) {
  force(n)
  
  function(x) {
    (max(x) - min(x)) / n
  }
}

ggplot(df, aes(x)) + 
  geom_histogram(binwidth = binwidth_bins(20)) + 
  facet_wrap(~ sd, scales = "free_x") + 
  labs(x = NULL)

ggplot(df, aes(x)) + 
  geom_histogram(bins = 2) + 
  facet_wrap(~ sd, scales = "free_x") + 
  labs(x = NULL)
```

that's basically `bins = 20` with a little variation...?  but can also use with auto-break-seeking algorithms like sturges etc.

### ggsave

let's skip this

## Statistical factories

### Box-Cox transformation

Box-Cox transformation helps transform data toward normality, with a single parameter $\lambda$ that controls the strenght of transformation.

Regular function version:

```{r}
boxcox1 <- function(x, lambda) {
  stopifnot(length(lambda) == 1)
  
  if (lambda == 0) {
    log(x)
  } else {
    (x ^ lambda - 1) / lambda
  }
}
```

Function factory version allows us to use it as a `stat_function()` in ggplot:

```{r}
boxcox2 <- function(lambda) {
  if (lambda == 0) {
    function(x) log(x)
  } else {
    function(x) (x ^ lambda - 1) / lambda
  }
}

stat_boxcox <- function(lambda) {
  stat_function(aes(colour = lambda), fun = boxcox2(lambda), size = 1)
}

ggplot(data.frame(x = c(0, 5)), aes(x)) + 
  lapply(c(0.5, 1, 1.5), stat_boxcox) + 
  scale_colour_viridis_c(limits = c(0, 1.5))

# visually, log() does seem to make sense as the transformation
# for lambda = 0; as values get smaller and smaller, the function
# gets close and closer to a log transformation
ggplot(data.frame(x = c(0.01, 1)), aes(x)) + 
  lapply(c(0.5, 0.25, 0.1, 0), stat_boxcox) + 
  scale_colour_viridis_c(limits = c(0, 1.5))
```

### Bootstrap generators

Function factories provide a useful way of bootstrapping - think of it as a bootstrap generator function.

### Maximum likelihood estimation

come back later...

## Function factories and functionals

come back later...

