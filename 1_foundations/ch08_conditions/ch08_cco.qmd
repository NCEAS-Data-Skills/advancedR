---
title: "Chapter 8 notes: conditions"
author: "Casey O'Hara"
format: 
  html:
    embed-resources: true
execute:
  message: !expr NA
editor: source
---

```{r}
library(rlang)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

# Conditions

## Introduction

R exception handling is similar to Lisp.

**Signals** to alert the user about unusual conditions:

* `stop()` for errors
* `warning()` for warnings
* `message()` for messages

And then **handlers** to deal with them:

* `tryCatch()`
* `withCallingHandlers()`

## Signalling conditions

* Errors: no way for a function to continue; execlution must stop
* Warnings: something is wrong, but the function has been able to at least partially recover, and can continue
* Messages: let the user know some action has been performed on their behalf...

### Errors

Errors are thrown by `stop()` - and by default, includes the function call.  Consider using `call. = FALSE` to omit the context:

```{r eval = FALSE}
f <- function() g()
g <- function() h()
h <- function() stop("This is an error!")

f()
#> Error in h(): This is an error!

h <- function() stop("This is an error!", call. = FALSE)
f()
#> Error: This is an error!
```

Another option is `rlang::abort()` which defaults to NOT including the function call, and has other advantages to be seen later.

Writing error messages is hard, because it's hard to predict the user's mental model of what's going on in the function.  Check out the tidyverse style guide for suggestions on error messages: [https://style.tidyverse.org/error-messages.html](https://style.tidyverse.org/error-messages.html)

### Warnings

Signalled by `warning()` - something's wrong but partial recovery and able to continue.  By default, warnings are printed only when control of the execution returns to the top level.  Can override this with the `warn` option: `options(warn = 1)`.  `rlang::warn()` is the rlang equivalent.

Many warnings in R would probably better be set as errors, e.g.:

```{r eval = FALSE}
file.remove("this-file-doesn't-exist")
#> Warning in file.remove("this-file-doesn't-exist"): cannot remove file 'this-
#> file-doesn't-exist', reason 'No such file or directory'
#> [1] FALSE

lag(1:3, k = 1.5)
#> Warning in lag.default(1:3, k = 1.5): 'k' is not an integer
#> [1] 1 2 3
#> attr(,"tsp")
#> [1] -1  1  1

as.numeric(c("18", "30", "50+", "345,678"))
#> Warning: NAs introduced by coercion
#> [1] 18 30 NA NA
```

Cases where warnings ARE appropriate:

* Deprecation: still want older code to work but encourage the user to switch to an updated function
* Full recovery: you are resonably certain the problem is recoverable - if 100% sure of recovery, no need for a warning, and if less certain, an error is better!

### Messages

Unlike warnings, messages are displayed immediately and do not have a `call.` argument.  When to use messages:

* When a default argument is non-trivial and you want to let the user know the default value.
* When writing a function that would do things otherwise silently, such as writing files or calling a web API, give the user some info to let them know what's going on
* When starting a long process with no intermediate output, and you're unable to do a progress bar
* When writing a package, sometimes you want a message on loading (e.g., `here() starts at C:/Users/casey/Documents/github/advancedR`)

If a function produces message, a good idea to offer an option to suppress, like `quiet = TRUE`.

Compare `cat()` vs `message()`: `cat()` for when the function is supposed to print to the console; `message()` when the primary goal is something else.

NOTE: in quarto, the default R Markdown setting of `knitr::opts_chunk$set(message = FALSE)` doesn't work the same way it used to - in RMarkdown, excludes messages from rendered output but still displays in console while knitting (maybe no longer true, with new knitr?).  But in Quarto YAML header, 

```r
---
blah
execute:
  message: false
---
```

omits ALL messages including in console during knitting.  Instead use `#| message: !expr NA` in the code chunk?  in the header doesn't seem to work correctly?

```{r}
#| message: !expr NA
#| warning: !expr NA
message('HERE IS A MESSAGE')

warning('HERE IS A WARNING')
```

### Exercises

Write a wrapper around `file.remove()` that throws an error if the file to be deleted does not exist.

```{r}
file_remove <- function(f) {
  if(!file.exists(f)) stop("File doesn't exist: ", f)
  file.remove(f)
}
```


What does the `appendLF` argument to `message()` do? How is it related to `cat()`?

> [`appendLF` will add new lines between string arguments to message; similar (looks like) for the `fill` argument for `cat()` to drive auto line feeds...]{.answer}

## Ignoring conditions

Use `try()` to ignore errors; use `suppressWarnings()` or `suppressMessages()` to suppress those things.

`try()` will allow a function to error out, but keep going.  Usefull pattern/approach: you can assign a result to an object inside the try call, but first define a default value in case the call fails.  This works because the argument is evaluated in the calling environment, not the function - so if it succeeds, the default will be overwritten with the successful result in the calling environment, but if it fails, the error keeps the default from being overwritten (and then the `try` allows it to keep going anyway).

```{r}
default <- NULL
try(default <- read.csv("possibly-bad-input.csv"), silent = TRUE)
```

## Handling conditions

To define custom behaviours when an error occurs, you can use `tryCatch()` and `withCallingHandlers()`.

```{r}
tryCatch(
  error = function(cnd) {
    # code to run when error is thrown
  },
  code_to_run_while_handlers_are_active
)

withCallingHandlers(
  warning = function(cnd) {
    # code to run when warning is signalled
  },
  message = function(cnd) {
    # code to run when message is signalled
  },
  code_to_run_while_handlers_are_active
)
```

> * `tryCatch()` defines **exiting** handlers; after the condition is handled, control returns to the context where `tryCatch()` was called. This makes `tryCatch()` most suitable for working with errors and interrupts, as these have to exit anyway.
* `withCallingHandlers()` defines **calling** handlers; after the condition is captured control returns to the context where the condition was signalled. This makes it most suitable for working with non-error conditions.

### Condition objects

COnditions create objects with information about the condition.  We can use `rlang::catch_cnd()` to see some of that info:

```{r}
cnd <- rlang::catch_cnd(stop('oops'))
str(cnd)
```

Error message, can be grabbed using `conditionMessage(cnd)`, and call that triggered the condition, often NULL; use `conditionCall(cnd)` to grab it.  Also a class (therefore an S3 object): `class(cnd)`.

### Exiting handlers

This is `tryCatch()` - overwrite the default error behavior.  The code always exits once the condition has been caught, useful with errors since errors generally exit too.  This code returns NA instead of throwing an error:

```{r}
f3 <- function(x) {
  tryCatch(
    error = function(cnd) NA,
    log(x)
  )
}

f3("x")
#> [1] NA
```

If no condition, or the condition class (error, warning, message) doesn't match the handler name, no problems.  Argument to the handler function is the condition object, and `cnd` is typically used as convention.

There is also an argument called `finally` which is like an `on.exit()` call, always runs whether the intended expression succeeds or fails - good for things like cleanup, deleting files, or closing connections.

### Calling handlers

Calling handlers don't exit after the condition is caught - they keep going, so more useful in contexts like messages and warnings.  Compare results of `tryCatch()` and `withCallingHandlers()` - `trycatch()` catches the first message and stops, `withCallingHandlers()` catches the first message, reports it, then catches the second message and reports it.

```{r}
tryCatch(
  message = function(cnd) cat("Caught a message!\n"), 
  {
    message("Someone there?")
    message("Why, yes!")
  }
)
#> Caught a message!

withCallingHandlers(
  message = function(cnd) cat("Caught a message!\n"), 
  {
    message("Someone there?")
    message("Why, yes!")
  }
)
#> Caught a message!
#> Someone there?
#> Caught a message!
#> Why, yes!
```

Some stuff about handlers "bubbling up" to higher levels; seems like an extension to worry about later on.

### Call stacks

Again, pretty specialized (Hadley: "These differences are generally not important..."), worry about this later on...

### Exercises

1. What extra information does the condition generated by `abort()` contain compared to the condition generated by `stop()` i.e. whatâ€™s the difference between these two objects? Read the help for `?abort` to learn more.
```{r}
catch_cnd(stop("An error"))
catch_cnd(abort("An error"))
```

>[Looks like `abort()` saves a traceback/condition metadata - class, metadata, call, and parent, as well as the message and type of condition...]{.answer}

2. Predict the results of evaluating the following code

```{r}
show_condition <- function(code) {
  tryCatch(
    error = function(cnd) "error",
    warning = function(cnd) "warning",
    message = function(cnd) "message",
    {
      code
      NULL
    }
  )
}

show_condition(stop("!"))     ### 'error'
show_condition(10)            ### 10; NULL   ### NOPE just NULL - the 10 is evaluated but not returned
show_condition(warning("?!")) ### 'warning'
show_condition({
  10
  message("?")
  warning("?!")
})                            ### 10; 'message' ### NOPE just 'message'
```

3. Explain the results of running this code:

```{r}
withCallingHandlers(
  message = function(cnd) message("b"),
  withCallingHandlers(
    message = function(cnd) message("a"),
    message("c")
  )
)
#> b
#> a
#> b
#> c
```

>[The internal thing is run first; intercepts the message ('c') and returns message('a'), which is captured by the upper level thing, which responds with message('b') and then reports the message('a'); then the message('c') is reported up to the upper level, which is intercepted and responds message('b') again, then reports the message('c').]{.answer}

4. Read the source code for `catch_cnd()` and explain how it works.  NOTE: original code for catch_cnd() was more simple:

```{r}
catch_cnd <- function(expr) {
  tryCatch(
    condition = function(cnd) cnd,
    {
      force(expr)
      return(NULL)
    }
  )
}
```

> [Just a wraparound the tryCatch() function, which would force the expression, and if it resulted in a condition, would return the condition, and if not, would return NULL as the condition.]{.answer}

5. How could you rewrite `show_condition()` to use a single handler?

```{r}
show_condition <- function(code) {
  tryCatch(
    condition = function(cnd) class(cnd)[2],
    {
      code
      NULL
    }
  )
}
show_condition(message('thing1'))
show_condition(warning('thing2'))
show_condition(stop('thing3'))
```

## Custom conditions

Custom conditions can be used to contain better metadata in the condition object, and/or to return more informative error messages.  They allow handlers to do a lot more since there's more information to work with.  Hadley's recommened structure using the functionality of the `rlang::`abort()` function:

> name of the type of error comes first, followed by the user-facing text, followed by custom metadata

```{r eval = FALSE}
abort(
  "error_not_found",
  message = "Path `blah.csv` not found", 
  path = "blah.csv"
)
#> Error: Path `blah.csv` not found
```

Interesting and potentially useful later, but gonna skip for now.

## Applications

Again, interesting and potentially useful for later, but let's revisit at that time.



