---
title: "Chapter 6: Functions -- Notes & Exercises"
author: "Casey O'Hara"
format: 
  html:
    toc: true
    embed-resources: true
engine: knitr
execute:
  warning: !expr NA ### suppresses warnings when rendering, but not in interactive mode
  message: !expr NA
code-overflow: wrap
editor: source
---

## Setup


```{r libs, echo = FALSE}
### just here so the shortcut doesn't create a scss chunk
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

# 6 Functions

From [Chapter 6](https://adv-r.hadley.nz/functions.html#functions) in the second edition of [Advanced R](https://adv-r.hadley.nz/index.html) by Hadley Wickham.

Answers for all exercises can be found in [Chapter 5](https://advanced-r-solutions.rbind.io/functions) in the second edition of [Advanced R Solutions](https://advanced-r-solutions.rbind.io/)

## 6.2 Function Fundamentals

### 6.2.1 Function components

Three components:

* `formals()` - the list of arguments
* `body()` - code inside the function
* `environment()` - the data structure that determines how the function finds the values associated with the names

```{r}
#| eval: false

f02 <- function(x, y) {
  # A comment
  x + y
}

formals(f02)
#> $x
#> 
#> 
#> $y

body(f02)
#> {
#>     x + y
#> }

environment(f02)
#> <environment: R_GlobalEnv>
```

Functions can contain attributes, incl `srcref`, the source reference, points to the source code used to create the function.

```{r}
f02 <- function(x, y) {
  # A comment
  x + y
}

attr(f02, 'srcref')
```

### 6.2.2 Primitive functions

These call C code directly.  Examples: `sum()`, `[`.  They have type `builtin` or `special`, and `formals()`, `body()`, and `environment()` all `NULL` b/c they live in C, not R.

```{r}
#| eval: false

sum
#> function (..., na.rm = FALSE)  .Primitive("sum")
`[`
#> .Primitive("[")

typeof(sum)
#> [1] "builtin"
typeof(`[`)
#> [1] "special"

formals(sum)
#> NULL
body(sum)
#> NULL
environment(sum)
#> NULL
```

### 6.2.3 First-class functions

R functions are objects, a language property often called "first-class functions."  No special syntax for defining and naming (as in Matlab or C), just regular R code like any other object.

If you don't bind it to a name, it is an anonymous function (e.g., inside `lapply()`)

### 6.2.4 Invoking a function

Regular: function name, and place the arguments into appropriate places, wrapped in parentheses...

Other option: arguments already in a data structure e.g. a `list`: instead, use `do.call()` - the function to call, and the list containing the function arguments.

```{r}
args <- list(x = 1:10, na.rm = TRUE)

do.call(what = mean, args = args)
```


### 6.2.5 Exercises

1.  Given a name, like `"mean"`, [`match.fun()`](https://rdrr.io/r/base/match.fun.html) lets you find a function. Given a function, can you find its name? Why doesn't that make sense in R?

>[A function could be represented by multiple names, or even none (anonymous), but each name can only represent a single function.  Relationship between name and object is clearly defined only in one direction.  Example code from the answer key:]{.answer}

```{r}
function(x) sd(x) / mean(x)
#> function(x) sd(x) / mean(x)

f1 <- function(x) (x - min(x)) / (max(x) - min(x))
f2 <- f1
f3 <- f1
```

>[Not exactly sure how this is useful, however...]{.answer}

2.  It's possible (although typically not useful) to call an anonymous function. Which of the two approaches below is correct? Why?

```{r}         
function(x) 3()
#> function(x) 3()
(function(x) 3)()
#> [1] 3
```

>[The second is correct.  The first defines a function that takes x, and returns the result of the function `3()`, which is an invalid name.  The second creates a function that takes x, and returns 3; the second set of parentheses call the function.  If you wrap the first in parens, and then include a second set (to call it), you get an error, attempt to apply non-function (i.e., the function `3()`)]{.answer}


3.  A good rule of thumb is that an anonymous function should fit on one line and shouldn't need to use `{}`. Review your code. Where could you have used an anonymous function instead of a named function? Where should you have used a named function instead of an anonymous function?

>[For simple cases with obvious results (e.g., FUN = function(f) read_csv(f)), you could use an anonymous function (or better, FUN = read_csv, but who's counting?) Named functions should be used for complex cases where the function is not immediately clear.]{.answer}


4.  What function allows you to tell if an object is a function? What function allows you to tell if a function is a primitive function?

>[`class()` tells whether something is a function; `typeof` will return closure for a first-class function and `builtin` or `special` for primitives.  Also, `is.function()` and `is.primitive()`...]{.answer}


5.  This code makes a list of all functions in the base package.

```{r}         
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
```

  Use it to answer the following questions:

   a.  Which base function has the most arguments?
    
  >[map the list to the `formals()` function, and calc the length of each element, then find the longest element; then use logical subsetting to find the matching original element.]{.answer}
  
```{r}
fun_l <- sapply(funs, FUN = function(x) length(formals(x)))
max_fun <- funs[which(fun_l == max(fun_l))]
names(max_fun)

### OR ###

which(fun_l == max(fun_l)) ### tells the index, and also the name
```
  

    b.  How many base functions have no arguments? What's special about those functions?
    
```{r}
length(which(fun_l == 0))
```
    
  > [260 functions have no arguments... some of these are primitives b/c formal() returns NULL (length 0) for primitives.]{.answer}

    c.  How could you adapt the code to find all primitive functions?
```{r}
fun_prim <- sapply(funs, FUN = is.primitive)

prims <- which(fun_prim)
head(names(prims)); length(prims)
```

  >[apply is.primitive across the functions to get the indices (and names) of them.]{.answer}

6.  What are the three important components of a function?

>[Arguments (`formals()`), body code (`body()`), and environment (`environment()`).  EXCEPT FOR PRIMITIVES.]{.answer}

7.  When does printing a function not show the environment it was created in?

```{r}
mean

f3
```

>[Functions created in the global env don't print their environment; also, neither do primitives (because they're in C world, not R world).]{.answer}


## 6.3 Function Composition

Stringing together multiple function calls: 

* nesting (e.g., `rmse <- sqrt(mean((x - mean(x))^2)))`) - good for short sequences, but gets unwieldy for longer sequences of function calls
* saving as intermediate objects e.g., `y <- x - mean(x); z <- y^2; w <- mean(z), xx <- sqrt(w)` is clunky and focuses on objects (nouns)
* piping is good for communicating flow (verbs) but dependent on external package (but now native! I still need to start using that instead)

For sequences of multiple calls to functions, three ways:

* Nesting (`f(g(x))`) is concise and ok for short sequences, but complicated and hard to read for long sequences.
* Intermediate objects (`y <- f(x); g(y)`) is ok if intermediate objects can be useful, but when truly intermediate kind of annoying.
* Piping (`x %>% f() %>% g()`) is readable, but requires an extra package (not any more!) and assumes reader understand piping.

## 6.4 Lexical Scoping

"Lexical scoping" - looking up the value associated with a name, based on how the function was defined, not how the function was called.

### 6.4.1 Name masking

Names created inside a function "mask" names created outside the function - e.g.,

```{r}
x <- 10
g <- function() {x <- 20; x}
g()
x
```

the `x` inside the function supercedes the value of `x` defined outside the function.  If a name is not defined inside the function, R looks one level up (one environment up) until it finds a match; if still none after getting to global env, looks in loaded packages.

### 6.4.2 Functions versus variables

If a name is used for a function call, R ignores non-function objects when looking for that name... this is confusing to have a name associated with a function at one level and a variable at another level, e.g.:

```{r}
g09 <- function(x) x + 100
g10 <- function() {
  g09 <- 10
  g09(g09)
}
g10()
#> [1] 110
```

Just don't do that!

### 6.4.3 A fresh start


### 6.4.4 Dynamic lookup


### 6.4.5 Exercises


1.    What does the following code return? Why? Describe how each of the three c's is interpreted.

```{r}
c <- 10
c(c = c)
```

>[Creates a named vector, with name "c" and value 10.  The first c is interpreted as the function `c`, which combines objects to make vectors; when a name is used in a function call (as in `c()`) R ignores non-function objects to find the proper match.  The second c is the named part of the named vector.  The third assigns the value `c (=10)` to the vector.]{.answer}


2.   What are the four principles that govern how R looks for values?

>[Name masking - names created inside functions mask names created outside those functions.  Functions vs variables - if a function and value share the same name (diff envts) then if name used as a function call, ignores non-function objects.  Fresh start - each subsequent invocation of a function "forgets" the values in the previous one (the temp environment disappears along with all values inside it!).  And dynamic lookup - R looks for values when an object is run, not when the function is created.  This can be problematic if the function depends on values in an envt "above" the function environment - e.g., in GlobalEnv - that change.  Use `codetools::findGlobals()` to find external dependencies within a function!]{.answer}


3.  What does the following function return? Make a prediction before running the code yourself.

```{r}
f <- function(x) {    ### f_1
  f <- function(x) {  ### f_2
    f <- function() { ### f_3
      x ^ 2
    }
    f() + 1           ### 2. call f_3
  }
  f(x) * 2            ### 1. call f_2
}
f(10)
```


>[Prediction: `f(10)` in global env passes 10 (in envt 1) to `f(10) * 2`.  But that `f(10)` holds x = 10 in envt 2 and calls f() + 1.  That, in turn, takes the x = 10 from envt 2 into envt 3, squares it, and returns 100 to f() in envt 2, where + 1 happens, and 101 is returned to f(x) in envt 1, where it's multiplied by 2 and then that result is returned up to the global envt.  So the result is 202.  And it checks out!]{.answer}


## 6.5 Lazy Evaluation

Function arguments only evaluated if and when they are accessed.

### 6.5.1 Promises

Data structure that enables lazy evaluation.  Three components:

* expression that will be (eventually) evaluated, e.g., `x + y`
* environment in which to evaluate the expression, i.e., the environment where the function is called
* a value, "which is computed and cached the first time a promise is accessed when the expression is evaluated in the specified environment."  That's a mouthful!  The example:

```{r}
double <- function(x) { 
  message("Calculating...")
  x * 2
}

h03 <- function(x) {
  c(x, x)
}

h03(double(20))
#> Calculating...
#> [1] 40 40
```

The `double(20)` is called only once, as noted by only one instance of "calculating"... but since that value is passed in once (as `x` to `h03`), would it make sense that it should be called twice?  I don't think so?

### 6.5.2 Default arguments

Default arguments are evaluated lazily - so can be defined in terms of other arguments, or even values defined later in the function, presumably as long as it is defined before the default argument is accessed:

```{r}
h04 <- function(x = 1, y = x * 2, z = a + b) {
  a <- 10
  b <- 100
  
  c(x, y, z)
}

h04()
#> [1]   1   2 110
```

But that's confusing and hard to understand... don't do it!

Eval environ is different for default and user-supplied arguments - user-supplied evaluated outside the function (e.g., global env) while default evaluated inside the function (i.e., function env).

### 6.5.3 Missing arguments

Use missing() inside a function to test whether an argument is missing (no default, no value supplied) - this can then be used to create a default.  But seems sloppy - just set a default NULL for the argument, and if null, use the same logic to create a helpful default.

### 6.5.4 Exercises

1.    What important property of `&&` makes `x_ok()` work?

```{r}
x_ok <- function(x) {
  !is.null(x) && length(x) == 1 && x > 0
}

x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
```

>[Evaluates the LHS; if FALSE, then doesn't evaluate the RHS since the whole result is definitely FALSE.  In this case, for `x_ok(1:3)`, if it evaluated the last part (x > 0) it would return TRUE TRUE TRUE, length 3, which conflicts with the length of the other two tests.]{.answer}


What is different with this code? Why is this behaviour undesirable here?

```{r}
x_ok <- function(x) {
  !is.null(x) & length(x) == 1 & x > 0
}

x_ok(NULL)
#> logical(0)
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE FALSE FALSE
```

>[Presumably you want a single TRUE or FALSE; but if & evaluates all tests (instead of stopping lazily at the first FALSE), then it gets to the final test and results in a length-3 response.]{.answer}


2.    What does this function return? Why? Which principle does it illustrate?

```{r}
f2 <- function(x = z) {
  z <- 100
  x
}
f2()
```

>[Returns 100.  Illustrates that the default argument is not evaluated until it is accessed, so even though `z` doesn't exist when called, it exists (defined immediately before) when `x` is accessed.]{.answer}


3.    What does this function return? Why? Which principle does it illustrate?

```{r}
y <- 10
f1 <- function(x = {y <- 1; 2}, y = 0) {
  c(x, y)
}
f1()
y
```

>[In the `x = {y <- 1; 2}` argument, the global value of y is assigned a value of 1 (overwriting the y <- 10) (UNLESS a user-provided value for x!).  After that, the default for x is assigned 2.  Then the default value for y *inside* the function is assigned 0.  So this should return (by default) a vector c(2, 0).  Calling `y` outside the function will return 1.   NOPE!  The x default isn't evaluated until inside the function environment, so assigns y <- 1 inside the function environment when x is evaluated, and since there is now a value for y, the default is no longer merely a promise and so is not evaluated - resulting in c(2, 1).  The global y is unchanged.]{.answer}


4.    In `hist()`, the default value of `xlim` is `range(breaks)`, the default value for breaks is `"Sturges"`, and
```{r}
range("Sturges")
#> [1] "Sturges" "Sturges"
```

Explain how `hist()` works to get a correct `xlim` value.

>[There must be a test inside `hist()` to ensures that the range evaluates to numbers; if not, there must be some default action where it looks at the values of `x`.  NOT QUITE: According to the solutions, the `hist()` function makes sure that `breaks` (not `xlim`) evaluates to a numeric vector (instead of "sturges") *before* the `xlim = range(breaks)` is evaluated, so `xlim` becomes a two-element numeric vector.]{.answer}


5.    Explain why this function works. Why is it confusing?

```{r}
show_time <- function(x = stop("Error!")) {
  stop <- function(...) Sys.time()
  print(x)
}
show_time()
#> [1] "2021-02-21 19:22:36 UTC"
```

>[In the arguments, `x` is set as `stop('Error!')`.  But before `x` is evaluated, `stop()` is redefined, and then when `print(x)` is evaluated, `x` now equals the new definition of `stop()` (which returns the time).]{.answer}

6.    How many arguments are required when calling `library()`?

>[You can call `library()` with no arguments and it returns a list of all the packages available.  In the function itself, there are missing() arguments to see if any of the non-defaulted arguments are missing, so it knows how to handle them.  In the help it says it returns an object of class `"libraryIQR"` if called with no arguments.]{.answer}


## 6.6 `...` (dot-dot-dot)

The `...` argument is similar to `vararg`s (`var`iable `arg`uments) in other languages.  This allows you to pass arguments through the function into an inner function, by name.  Two primary use cases:

* function takes a function as an argument - you need to pass add'l arguments to that function.  E.g.:  `lapply` takes as its `FUN` argument the function `mean`, and the `na.rm = TRUE` is in the dots, which get passed to `mean`.

```{r}
x <- list(c(1, 3, NA), c(4, NA, 6))
str(lapply(x, mean, na.rm = TRUE))
#> List of 2
#>  $ : num 2
#>  $ : num 5
```

* Function is an S3 generic, then it probably has methods for different object classes... so the dots allow for any number of different arguments without having to specify for every single object class.

### 6.6.1 Exercises

1.    Explain the following results:

```{r}
sum(1, 2, 3)
#> [1] 6
mean(1, 2, 3)
#> [1] 1

sum(1, 2, 3, na.omit = TRUE)
#> [1] 7
mean(1, 2, 3, na.omit = TRUE)
#> [1] 1
```

>[`sum()` takes `...` as its first argument, with only fixed argument as na.rm.  Those `...` can be numeric/complex/logical vectors that get summed.  `mean()` takes `x` as its first arg, which is what gets meaned, and then `...` that are further arguments that don't get counted in the mean.  The `sum(1, 2, 3, na.omit = TRUE)` treats the fourth argument as one of the `...` and interprets it as a logical TRUE therefore 1, so gets added into the sum.  The same argument in `mean` falls into the `...` which are not used in the function so thus doesn't affect the mean.]{.answer}


2.    Explain how to find the documentation for the named arguments in the following function call:

```{r}
plot(1:10, col = "red", pch = 20, xlab = "x", col.lab = "blue")
```

>[Don't bother - just use ggplot!  Looks like `?plot.default` gets you some of those, and clicking on the "other graphical parameters" for `...` might get you the rest of the way (or `?par`)]{.answer}


3.    Why does `plot(1:10, col = "red")` only colour the points, not the axes or labels? Read the source code of `plot.default()` to find out.

>[Because you need a different argument? not really all that interested]{.answer}


## 6.7 Exiting a Function


### 6.7.1 Implicit versus explicit returns

Function implicitly returns result of last evaluated expression in the function; `return()` explicitly returns a value

### 6.7.2 Invisible values

Visible: calling in interactive context prints the result; can apply `invisible()` to suppress printing the result (though result in still returned)

```{r}
j04 <- function() invisible(1)
j04() ### no print
print(j04()); (j04())
x <- j04(); x
```

The assign arrow `<-` returns invisibly:

```{r}
x <- 2
(x <- 2)
```


### 6.7.3 Errors

Use `stop()` to terminate execution of a function if it can't complete its task.

### 6.7.4 Exit handlers

For functions that make temp changes to the global state, what if an error occurs? can muck up that global state.  To undo those changes and restore global state, use `on.exit()` to set up an exit handler, which is executed regardless of how the function exits.

```{r, eval = FALSE}
j06 <- function(x) {
  cat("Hello\n")
  on.exit(cat("Goodbye!\n"), add = TRUE)
  
  if (x) {
    return(10)
  } else {
    stop("Error")
  }
}

j06(TRUE)
#> Hello
#> Goodbye!
#> [1] 10

j06(FALSE)
#> Hello
#> Error in j06(FALSE): Error
#> Goodbye!
```

Always use `add = TRUE` in `on.exit()`.

Use `on.exit()` to put clean up code directly next to the code that requires clean up:

```{r}
cleanup <- function(dir, code) {
  old_dir <- setwd(dir) ### returns original dir before the change (invisibly)
  on.exit(setwd(old_dir), add = TRUE)
  
  old_opt <- options(stringsAsFactors = FALSE)
  on.exit(options(old_opt), add = TRUE) ### returns list of previous values (invisibly)
}


with_dir <- function(dir, code) {
  old <- setwd(dir)
  on.exit(setwd(old), add = TRUE)

  force(code)
}

getwd()
#> [1] "/Users/runner/work/adv-r/adv-r"
with_dir("~", getwd())
#> [1] "/Users/runner"
```


### 6.7.5 Exercises

1.    What does `load()` return? Why don't you normally see these values?

>[Returns a vector of names of the objects created when loading the .Rdata, but invisibly]{.answer}

2.    What does `write.table()` return? What would be more useful?

>[NULL?  maybe return the data written, invisibly? readr does this so you can write out in the middle of a piped workflow, and then continue with the workflow]{.answer}

3.    How does the `chdir` parameter of `source()` compare to `with_dir()`? Why might you prefer one to the other?

>[`with_dir()` doesn't have an option, and changes directory, runs code, then changes back (with the on.exit ensuring returning to orig dir even if something goes wrong).  `chdir = FALSE` default of `source` might cause errors if the sourced file has dependencies in its location (i.e., a different dir).]{.answer}

4.    Write a function that opens a graphics device, runs the supplied code, and closes the graphics device (always, regardless of whether or not the plotting code works).

```r
png_fun <- function(file, thing) {
  png(file)
  on.exit(dev.off())
  {thing}
}
```

5.    We can use `on.exit()` to implement a simple version of `capture.output()`.

```{r}
capture.output2 <- function(code) {
  temp <- tempfile()
  on.exit(file.remove(temp), add = TRUE, after = TRUE)

  sink(temp)
  on.exit(sink(), add = TRUE, after = TRUE)

  force(code)
  readLines(temp)
}
capture.output2(cat("a", "b", "c", sep = "\n"))
#> [1] "a" "b" "c"
```

Compare `capture.output()` to `capture.output2()`. How do the functions differ? What features have I removed to make the key ideas easier to see? How have I rewritten the key ideas so they're easier to understand?

>[file is unspecified, and automatically deleted upon exiting, no option to append or save - NOPE but :shrug:]{.answer}

## 6.8 Function Forms

In R: Everything that exists is an object, everything that happens is a function call.

Four forms:

* prefix, common, e.g., `my_fxn(a = 1, b = 2)`
* infix, common but doesn't look as much like a "function" but instead an operator, e.g., `1 + 2`
* replacement functions, e.g., `names(df) <- c('a', 'b', 'c')` where the function replaces values in an object, looks like a prefix function
* special functions like `[[`, `if`, `for` - no specific syntax but useful in many ways

### 6.8.1 Rewriting to prefix form

Every type can be rewritten to prefix form.  Examples:

```r
x + y
`+`(x, y)

names(df) <- c("x", "y", "z")
`names<-`(df, c("x", "y", "z"))

for(i in 1:10) print(i)
`for`(i, 1:10, print(i))
```

Knowing the function name for a non-prefix function, you can overwrite the definition! e.g., `` `)` <- function(a, b) a + b`.


### 6.8.2 Prefix form

Multiple ways to do arguments: unnamed (position-dependent), partial name match, full name.  Good practice: use position match for first one or two clear and well known arguments; avoid partial match (can't disable but can set `options(warnPartialMatchArgs = TRUE)`)



### 6.8.3 Infix functions

Infix functions come between their two arguments, e.g., `+`.  User defined infix functions look like `%x%` where `x` can be any non-% characters. 

```{r eval = FALSE}
`%+%` <- function(a, b) paste0(a, b)
"new " %+% "string"
#> [1] "new string"
```

Escape special characters when defining but no need when calling.
```{r eval = FALSE}
`% %` <- function(a, b) paste(a, b)
`%/\\%` <- function(a, b) paste(a, b)

"a" % % "b"
#> [1] "a b"
"a" %/\% "b"
#> [1] "a b"
```

### 6.8.4 Replacement functions

Replacement functions have a special name form: `xxx<-`.  More complexity but that's enough for now.

### 6.8.5 Special forms

Parentheses, subsetting operators, and control flow functions are all special forms, but can be rewritten as prefix form.  `function()` is also a special form.  All are primitives, thus don't print information when called.


### 6.8.6 Exercises

1.    Rewrite the following code snippets into prefix form:

```{r}
#| eval: false

1 + 2 + 3

1 + (2 + 3)

if (length(x) <= 5) x[[5]] else x[[n]]
```


```{r eval = FALSE}
`+`(`+`(1, 2), 3)

`+`(1, `(`(`+`(2, 3)))

x <- 10:6; n = 3
`if`(`<=`(length(x), 5), `[[`(x, 5), `[[`(x, n))
```


2.    Clarify the following list of odd function calls:

```{r eval = FALSE}
x <- sample(replace = TRUE, 20, x = c(1:10, NA))
y <- runif(min = 0, max = 1, 20)
cor(m = "k", y = y, u = "p", x = x)
```

```r
x <- sample(c(1:10, NA), size = 20, replace = TRUE)
y <- runif(n = 20, min = 0, max = 1)
cor(x, y, m = 'k', u = 'p')
```

3.    Explain why the following code fails:

```{r}
#| eval: false

modify(get("x"), 1) <- 10
#> Error: target of assignment expands to non-language object
```

>[]{.answer}

4.    Create a replacement function that modifies a random location in a vector.


```{r}
`rand_mod<-` <- function(x, value) {
  i <- sample(1:length(x), size = 1)
  x[i] <- value
  return(x)
}

v <- 1:10
rand_mod(v) <- 11
v
```

>[]{.answer}

5.    Write your own version of `+` that pastes its inputs together if they are character vectors but behaves as usual otherwise. In other words, make this code work:

```{r}
#| eval: false

1 + 2
#> [1] 3

"a" + "b"
#> [1] "ab"
```

```{r}
`+` <- function(a, b = 0L) {
  if(typeof(a) == 'character' | typeof(b) == 'character') {
    x <- paste(a, b)
  } else {
    x <- base::`+`(a, b)
  }
  return(x)
}

1+2
'dog' + 3

rm(`+`) ### remove definition in global env (revert to base::`+`)
```

>[]{.answer}

6.    Create a list of all the replacement functions found in the base package. Which ones are primitive functions? (Hint: use `apropos()`.)

```{r}
x <- apropos(what = '<-', where = TRUE, mode = 'function')
```

>[Search for function names that end with `<-`. Use `apropos` to partial match object names with that at the end]{.answer}

7.    What are valid names for user-created infix functions?

>[Must start and end with a `%` with zero or more valid (or escaped) characters in between (except another `%`).]{.answer}

8.    Create an infix `xor()` operator.

```{r}
`%xor%` <- function(a, b) {
  return(!as.logical(a) == as.logical(b))
  ### xor defined as: (x | y) & !(x & y)
}

1 %xor% 0

2 %xor% 1
'dog' %xor% 'cat'
```


9.    Create infix versions of the set functions `intersect()`, `union()`, and `setdiff()`. You might call them `%n%`, `%u%`, and `%/%` to match conventions from mathematics.


```{r}
`%n%` <- function(a, b) intersect(a, b)
  ### seems cheating just to redefine an existing function as infix!
`%u%` <- function(a, b) union(a, b)
`%\\/%` <- function(a, b) setdiff(a, b)

x <- 1:10; y <- rep(c(2, 3, 5), 2)
x%n%y
x%u%y
x%/%y
```

