---
title: "Chapter 3 notes"
author: "Anna Ramji"
format: 
  html:
    embed-resources: true
editor: source
execute:
  message: false
  warning: false
---

Setup and yaml adapted from Casey O'Hara and Nick J Lyon

```{r setup}
library(tidyverse)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

# 3 Vectors

Outline:

> Section 3.2 introduces you to the atomic vectors: logical, integer, double, and character. These are R’s simplest data structures.

> Section 3.3 takes a small detour to discuss attributes, R’s flexible metadata specification. The most important attributes are names, dimensions, and class.

> Section 3.4 discusses the important vector types that are built by combining atomic vectors with special attributes. These include factors, dates, date-times, and durations.

> Section 3.5 dives into lists. Lists are very similar to atomic vectors, but have one key difference: an element of a list can be any data type, including another list. This makes them suitable for representing hierarchical data.

> Section 3.6 teaches you about data frames and tibbles, which are used to represent rectangular data. They combine the behaviour of lists and matrices to make a structure ideally suited for the needs of statistical data.

https://adv-r.hadley.nz/vectors-chap.html

Quiz

1.  What are the four common types of atomic vectors? What are the two rare types?

    -   logical, integer, double, and character

2.  What are attributes? How do you get them and set them?

    -   metadata associated with variables

    -   get:

        -   `attr()` ( call attribute of specified object like `attr(a, "x")` )

        -    `str(attributes())`

    -   set:

        -   `attr()` with assignment operator to set: `attr(a, "x") <- "attributeblahblah"`

        -   set with `structure()` , called again with `str(attributes())`

3.  How is a list different from an atomic vector? How is a matrix different from a data frame?

    -   elements of a list can be any data type!

    -   elements of atomic vectors and matrices have to be the same data type

    -   data frames can have different columns with different data types, but every element in a column must be the same type

4.  Can you have a list that is a matrix? Can a data frame have a column that is a matrix?

    -   I feel like I've done both in practice before but can't think of examples off the top of my head... here's what the book says:

        > You can make a list-array by assigning dimensions to a list. You can make a matrix a column of a data frame with `df$x <- matrix()`, or by using [`I()`](https://rdrr.io/r/base/AsIs.html) when creating a new data frame [`data.frame(x = I(matrix()))`](https://rdrr.io/r/base/data.frame.html).

5.  How do tibbles behave differently from data frames?

    -   they're faster and lazier (I can relate).

    -   official answer:

        > Tibbles have an enhanced print method, never coerce strings to factors, and provide stricter subsetting methods.

## 3.2 Atomic vectors

<https://adv-r.hadley.nz/vectors-chap.html#atomic-vectors>

-   Logical
-   Integer
-   Double
-   Character
-   rare: complex
-   rare: raw

### 3.2.1 Scalars
> Each of the four primary types has a special syntax to create an individual value, AKA a scalar22:

>Logicals can be written in full (TRUE or FALSE), or abbreviated (T or F).

>Doubles can be specified in decimal (0.1234), scientific (1.23e4), or hexadecimal (0xcafe) form. There are three special values unique to doubles: Inf, -Inf, and NaN (not a number). These are special values defined by the floating point standard.

>Integers are written similarly to doubles but must be followed by L23 (1234L, 1e4L, or 0xcafeL), and can not contain fractional values.

>Strings are surrounded by " ("hi") or ' ('bye'). Special characters are escaped with \; see ?Quotes for full details.


### 3.2.3 Missing values

Usually infectious...

```{r}
NA > 5
#> [1] NA
10 * NA
#> [1] NA
!NA
#> [1] NA
```

sometimes not -- when "some identity holds for all possible inputs":

```{r}
NA ^ 0
#> [1] 1
NA | TRUE
#> [1] TRUE
NA & FALSE
#> [1] FALSE
```

"Propagation of missingness leads to a common mistake when determining which values in a vector are missing:"

```{r, eval=FALSE}
x <- c(NA, 5, NA, 10)
x == NA
#> [1] NA NA NA NA
```

In this case, use `is.na()` to test for missingness, rather than a logical == .


### 3.2.4 Testing and coercion

Copied from Casey O'Hara's notes:

> Use `is.logical()`, `is.integer()`, `is.double()`, `is.character()` - does as promised. But these are trickier so avoid:

> -   `is.vector()`: From documentation: `is.vector(x)` returns `TRUE` if `x` is a vector of the specified mode having no attributes other than names. If `mode = "any"`, `is.vector` may return `TRUE` for the atomic modes, `list` and `expression.` For any mode, it will return `FALSE` if `x` has any attributes except names. (still, looks like it is not entirely off track?)

> -   `is.atomic()`: `is.atomic` is true for the atomic types, but there are other atomic types that are not vectors, so `is.atomic` is not the same as `is.vector()`. Again, not entirely off base, but more complicated than perhaps seems.

> -   `is.numeric()`: While `as.numeric()` is identical to `as.double()`, and `numeric` in R is generally a synonym for `double`, `is.numeric()` is not identical to `is.double()` and returns `TRUE` for EITHER `double` or `integer` objects (but not for date/time objects or factors)

> If you combine different types (e.g., `c(1, 3.14, 'pi')`) you'll get the most general/most flexible (i.e., `character` \> `double` \> `integer` \> `logical`). This also happens with most math functions, e.g., `+`, or `log()` or `abs()`.

### 3.2.5 exercises

1.  How do you create `raw` and `complex` scalars?

`raw`:

```{r}
as.raw(24)
#> 18
charToRaw("Anna")
#> 41 6e 6e 61
```

`complex`:

```{r}
# complex(length.out = 0, # numeric. Desired length of the output vector, inputs being recycled as needed.
#            # all numeric:
#            real = numeric(),
#            imaginary = numeric(),
#            modulus = 1,
#            argument = 0)
#> 1+0i

#as.complex(x, ...)
#> Re(z)
#> Im(z)
#> Mod(z)
#> Arg(z)
#> Conj(z)
#> 
#> x: object, probably of mode complex
#> x: object of mode complex, or one of a class for which a methods has been defined

complex(length.out = 1, real = 1, imaginary = 1)
#> 1+1i
```



2.  Test your knowledge of the vector coercion rules by predicting the output of the following uses of `c()`:

```{r}
c(1, FALSE) # FALSE coerced to double -> 1, 0
c("a", 1)   # "1" coerced to character -> "a", "1"
c(TRUE, 1L) # both coerced to integer -> 1, 1
```

3.  Why is `1 == "1"` true? Why is `-1 < FALSE` true? Why is `"one" < 2` false?

[These logical operator functions (==, <, etc.) coerce their arguments to a common type. 1 gets coerced to "1", (both character), so they become exactly equal. `FALSE` gets coerced to 0, which is greater than -1. 2 is coerced to character "2", which alphabetically comes before "one", so "2" < "one". Using `identical()` does not perform this type of coercion.]{.answer}


4.  Why is the default missing value, `NA`, a logical vector? What’s special about logical vectors? (Hint: think about `c(FALSE, NA_character_)`.)

>4 types of missing values: NA (logical), NA_integer_ (integer), NA_real_ (double), and NA_character_ (character)

[the default `NA` gets coerced to the appropriate type (when applicable), while the others are already set types (integer, double, character). This is important because logical vectors are at the bottom of the coercion food chain: character → double → integer → logical . If the base is the most special small fish, it can be coerced to any of the other data types when appropriate (say, we have a data table about apple sales across different stores in different states, and this df has a column with apple sales in integers (25L, 30L, etc.), only tracking the sale of whole apples (sorry, no samples!). If the base missing value type is a logical, `NA`, this column's datatype can still be integers (`NA` coerced to `NA_integer_` (?). If the missing value was type double or character, this would coerce everything to be that higher-level (bigger fish) data type. If we had a column of logicals (did they sell apples at this store: `TRUE`, `FALSE`, `NA`)  -- that column's datatypes would only stay as logical if that missing value was `NA`. (I think??)]{.answer}


5.  Precisely what do `is.atomic()`, `is.numeric()`, and `is.vector()` test for?

[They operate checking for vector, atomic vector, or numeric vector...

> `is.atomic` returns `TRUE` if x is of an atomic type and `FALSE` otherwise.

> `is.numeric` is a more general test of an object being interpretable as numbers.... Methods for is.numeric should only return true if the base type of the class is **double** or **integer** *and values can reasonably be regarded as numeric* (e.g., arithmetic on them makes sense, and comparison should be done via the base type). (so no date/times, etc.)

> `is.vector` returns `TRUE` if x is a vector of the specified mode having no attributes other than names. If mode = "any", is.vector may return `TRUE` for the atomic modes, list and expression. For any mode, it will return `FALSE` if x has any attributes except names.

]{.answer}

## 3.3 Attributes

Get and set attributes with `attr()`: name-value pairs that attach metadata to an object. 

*   Retrieved and modified individually with `attr()`
*   retrieved en mass with `attributes()`
*   set en masse with `structure()`

```{r}
x <- 1:3

attr(x, 'a') <- 'value for attribute a'
attr(x, 'b') <- c('vector', 'of', 'values')

attr(x, 'a')
attributes(x)
str(attributes(x))
```

Attributes are generally ephemeral; most are lost by most operations:

```{r}
attributes(a[1])
# NULL
attributes(sum(a))
# NULL
```

Special attributes that are routinely preserved: 

*   **names**: character vector giving each element a name

*   **dim**(ensions): integer vector used to turn a vector into a matrix or array

### 3.3.2 Names

`names()` used to set column names for data frames, row names for matrices, and names for vectors. 

can do inline with `setNames()`

```{r}
# When creating it: 
x <- c(a = 1, b = 2, c = 3)

# By assigning a character vector to names()
x <- 1:3
names(x) <- c("a", "b", "c")

# Inline, with setNames():
x <- setNames(1:3, c("a", "b", "c"))
```

avoid using `attr(x, "names)` -- inefficient, less readable. 

remove with `x <- unname(x)` or `names(x) <- NULL`

should be unique, non-missing 

### 3.3.3 Dimensions

Important for multi-dimensional subsetting

By default, values passed to a matrix are filled into columns; can be overwritten with the `byrow` argument, (`byrow = TRUE`).

```{r dimensions-example}
# Two scalar arguments specify row and column sizes
x <- matrix(1:6, nrow = 2, ncol = 3)
x
#>      [,1] [,2] [,3]
#> [1,]    1    3    5
#> [2,]    2    4    6

# One vector argument to describe all dimensions
y <- array(1:12, c(2, 3, 2)) # 2 rows, 3 cols, 2 matrices
# defaults:
# array(data = NULL, dim = length(data), dimnames = NULL)
y
#> , , 1
#> 
#>      [,1] [,2] [,3]
#> [1,]    1    3    5
#> [2,]    2    4    6
#> 
#> , , 2
#> 
#>      [,1] [,2] [,3]
#> [1,]    7    9   11
#> [2,]    8   10   12

# You can also modify an object in place by setting dim()
z <- 1:6
dim(z) <- c(3, 2) # nrow, ncol
z
#>      [,1] [,2]
#> [1,]    1    4
#> [2,]    2    5
#> [3,]    3    6
```


### 3.3.4 Exercises

1.  How is `setNames()` implemented? How is `unname()` implemented? Read the source code.

>[`setNames(object, c(names))` ; `unname(obj)` sets existing names to null)]{.answer}

```{r}
setNames <- function(object = nm, nm) {
  names(object) <- nm
  object
}

# unusual case:
setNames( , c("a", "b", "c"))
#>   a   b   c 
#> "a" "b" "c"

unname <- function(obj, force = FALSE) {
  if (!is.null(names(obj))) 
    names(obj) <- NULL
  if (!is.null(dimnames(obj)) && (force || !is.data.frame(obj))) 
    dimnames(obj) <- NULL
  obj
}
```


2.  What does `dim()` return when applied to a 1-dimensional vector? When might you use `NROW()` or `NCOL()`?

> [`dim()` on a 1D *vector* returns `NULL`. Dimensions are attributes of matrices and arrays. You might use `NROW()` and `NCOL()` on atomic vectors, lists, and `NULL` values. Example from answer key:]{.answer}

```{r}
x <- 1:10

# Return NULL
nrow(x)
#> NULL
ncol(x)
#> NULL

# Pretend it's a column vector
NROW(x)
#> [1] 10
NCOL(x)
#> [1] 1
```


3.  How would you describe the following three objects? What makes them different from 1:5?

```{r}
x1 <- array(1:5, c(1, 1, 5)) # 1 row, 1 col, 5 in third dim
# interesting use of str here:
#> > str(x1)
#> int [1, 1, 1:5] 1 2 3 4 5
x2 <- array(1:5, c(1, 5, 1)) # 1 row, 5 cols, 1 in third dim
x3 <- array(1:5, c(5, 1, 1)) # 5 rows, 1 col, 1 in third dim
```

> [`x1`: 1 row, 1 col, 5 in third dim <- note in meeting... I thought of it before as almost like creating 5 arrays with 1 row 1 col, but you can have more than 2D, important to make this distinction. Like 1 row, 1 col, stack of 5 ?.... Aside from this, `1:5` is just a 1D vector (which means it has no dim attribute!).]{.answer}

4.  An early draft used this code to illustrate `structure()`:

```{r}
structure(1:5, comment = "my attribute")
#> [1] 1 2 3 4 5
#> # comment is special! 
#> from the documentation: Contrary to other attributes, the comment is not printed (by print or print.default)

# assign to object
comment_test <- structure(1:5, comment = "my attribute")

# use comment to query (or set) comment attribute set earlier!
comment(comment_test)
# [1] "my attribute"

attributes(comment_test)
# $comment
# [1] "my attribute"

attr(comment_test, "comment")
# [1] "my attribute"
```

But when you print that object you don’t see the comment attribute. Why? Is the attribute missing, or is there something else special about it? (Hint: try using help.)

> [`comment` is special! see code chunk above]{.answer}

## 3.4 S3 atomic vectors

Having a "class" attribute turns an object into an **S3 object**, which means it will behave differently when passed to a **generic** function
> note from Casey: e.g., why dates might print differently from a standard vector). Turns out a `factor` is a S3 vector that relates to `integer`s; `POSIXct` and `Date` (and date-times and durations) are S3 vectors that relate to `double`.

4 important S3 vectors used in base R: 

*   categorical data -- fixed set of levels in **factor** vectors
*   dates (with day resolution) -- recorded in **Date** vectors
*   date-times (with second or sub-second res) -- stored in **POSIXct** vectors
*   durations -- stored in **difftime** vectors


factor -> integer --> numeric --> atomic --> vector

POIXct & date --> double --> numeric --> atomic --> vector

### 3.4.1 factors

can contain only predefined values

factors are built on top of an integer vector with two attributes: `class` (factor) and `levels` (defines set of allowed values)


ordered:
```{r}
grade <- ordered(c("b", "b", "a", "c"), levels = c("c", "b", "a"))
grade
#> [1] b b a c
#> Levels: c < b < a
```

base functions commonly convert strings to factors (noticed this in OHI, corrected with `stringsAsFactors = FALSE` )

### 3.4.2 Dates

Dates are built on top of `double` vectors; only have the attribute (`class`) "Date", no other attributes. 

```{r}
today <- Sys.Date()

typeof(today)
#> [1] "double"
attributes(today)
#> $class
#> [1] "Date"
```


Value of double can be seen by stripping the class, represents the number of days since 1970-01-01:

```{r}
date <- as.Date("1970-02-01")
unclass(date)
#> [1] 31
```


### 3.4.3 Date-times

POSIXct, and POSIXlt (focus on ct -- simplest, built on top of atomic vector, most appropriate for use in dfs)

“POSIX” is short for Portable Operating System Interface, which is a family of cross-platform standards. “ct” stands for calendar time (the time_t type in C), and “lt” for local time (the struct tm type in C)

POSIXct built on double vectors, where value = number of seconds since 1970-01-01, and attributes of `class` and `tzone`. 

`tzone` (time zone) attribute only controls how date-time is formatted, not instant of time... also time is not printed if it is midnight!

```{r}
as.numeric(as.POSIXct("1970-01-01 22:00", tz = "UTC"))
# seconds since Jan 1 1970

now_ct <- as.POSIXct("2018-08-01 22:00", tz = "UTC")
now_ct
#> [1] "2018-08-01 22:00:00 UTC"

structure(now_ct, tzone = "Asia/Tokyo")
#> [1] "2018-08-02 07:00:00 JST"
structure(now_ct, tzone = "America/New_York")
#> [1] "2018-08-01 18:00:00 EDT"
structure(now_ct, tzone = "Australia/Lord_Howe")
#> [1] "2018-08-02 08:30:00 +1030"
structure(now_ct, tzone = "Europe/Paris")
#> [1] "2018-08-02 CEST"
```

### 3.4.4 Durations

Durations represent amount of time between pairs of dates or date-times, stored as difftimes. difftimes built on doubles, with attributes of `class` ("difftime") and `units` (e.g., "weeks", "days", etc.)

```{r}
one_week_1 <- as.difftime(1, units = "weeks")
one_week_1
#> Time difference of 1 weeks

typeof(one_week_1)
#> [1] "double"
attributes(one_week_1)
#> $class
#> [1] "difftime"
#> 
#> $units
#> [1] "weeks"

one_week_2 <- as.difftime(7, units = "days")
one_week_2
#> Time difference of 7 days

typeof(one_week_2)
#> [1] "double"
attributes(one_week_2)
#> $class
#> [1] "difftime"
#> 
#> $units
#> [1] "days"
```

### 3.4.5 Exercises

1.  What sort of object does `table()` return? What is its type? What attributes does it have? How does the dimensionality change as you tabulate more variables?

> [returns a contingency table of its input variables; integer vector with class `table` and dimensions (like an array). attributes `dim` (dims correspond to number of unique values/factor levels in each input variable) and `dimnames`]{.answer}

```{r}
x <- table(mtcars[c("vs", "cyl", "am")])

typeof(x)
#> [1] "integer"
attributes(x)
#> $dim
#> [1] 2 3 2
#> 
#> $dimnames
#> $dimnames$vs
#> [1] "0" "1"
#> 
#> $dimnames$cyl
#> [1] "4" "6" "8"
#> 
#> $dimnames$am
#> [1] "0" "1"
#> 
#> 
#> $class
#> [1] "table"

# Subset x like it's an array
x[ , , 1]
#>    cyl
#> vs   4  6  8
#>   0  0  0 12
#>   1  3  4  0
x[ , , 2]
#>    cyl
#> vs  4 6 8
#>   0 1 3 2
#>   1 7 0 0
```

2.  What happens to a factor when you modify its levels?

> [integer values stay the same, levels just change -- makes it look like data has changed!]{.answer}

3.  What does this code do? How do f2 and f3 differ from f1?

```{r}
# f2 <- rev(factor(letters)); f2[1]; as.integer(f2[1])
# 
# f3 <- factor(letters, levels = rev(letters)); f3[1]; as.integer(f3[1])
f2 <- rev(factor(letters)) # alphabet in reverse order, with factor levels that correspond to the original order of the alphabet (factors are set, then we reverse order of data, not the factor levels (a = 1st level, z = first letter printed))
fs
# 1] z y x w v u t s r q p o n m l k j i h g f e d c b a
# 26 Levels: a b c d e f g h i j k l m n o p q r s t u v w ... z
f2[1]
str(f2)
as.integer(f2)
# 26:1
f3 <- factor(letters, levels = rev(letters))
f3
as.integer(f2)
# also 26:1 !! because elements are represented by integers tied to factor levels. (a is first element, tied to 26th level = integer 26)
# sets alphabet factor levels in reverse order (z = 1st level, a = first letter printed)
```


## 3.5 Lists

Each element can be any data type and length. 

Technically, they're all the same type (reference to another object) and references can be any type... :thinkingface:

`c()` will combine several lists into one. If given a combination of atomic vectors and lists, `c()` will coerce the vectors to lists before combining them.

```{r}
l4 <- list(list(1, 2), c(3, 4))
l5 <- c(list(1, 2), c(3, 4))
str(l4)
#> List of 2
#>  $ :List of 2
#>   ..$ : num 1
#>   ..$ : num 2
#>  $ : num [1:2] 3 4
str(l5)
#> List of 4
#>  $ : num 1
#>  $ : num 2
#>  $ : num 3
#>  $ : num 4
```


turn list into an atomic vector with `unlist()`... "The rules for the resulting type are complex, not well documented, not always equivalent to what you’d get with `c()`"....

### 3.5.3 Matrices and arrays

With atomic vectors, the dimension attribute is commonly used to create matrices. With lists, the dimension attribute can be used to create list-matrices or list-arrays:

```{r}
l <- list(1:3, "a", TRUE, 1.0)
dim(l) <- c(2, 2)
l
#>      [,1]      [,2]
#> [1,] Integer,3 TRUE
#> [2,] "a"       1

l[[1, 1]]
#> [1] 1 2 3
```

"if you’re running models on a spatio-temporal grid, it might be more intuitive to store the models in a 3D array that matches the grid structure"

### 3.5.4 Exercises

1.  List all the ways that a list differs from an atomic vector.

> [can contain multiple types; point to separate reference in memory (atomic vectors jusut point to 1 address in mem); can contain lists; subsetting with out-of-bounds and NA values leads to diff output ]{.answer}

2.  Why do you need to use `unlist()` to convert a list to an atomic vector? Why doesn’t `as.vector()` work?

> [`unlist()` coerces all elements to same datatype; a list is already a vector (though not an atomic one) (e.g., `is.vector(list())` returns `TRUE`, `is.vector(as.vector(mtcars))` returns `FALSE`.... ]{.answer}

```{r}
unlist(list(1:3, 3.14, letters[4:6]))
```


3.  Compare and contrast `c()` and `unlist()` when combining a date and date-time into a single vector.

```{r}
d <- as.Date('2024-08-15')
dt <- as.POSIXct('2024-08-15 00:00:00', tz = "UTC") # PDT and PST aren't recognized

ddt <- c(d, dt)
class(ddt)
unclass(d)
# [1] 19950 (number of days since 1970-01-01)
unclass(dt)
# [1] 1723680000
# attr(,"tzone")
# [1] "UTC"

ddt_l <- list(d, dt)
unlist(ddt_l)
# [1]      19950 1723680000

date    <- as.Date("1970-01-02")
dttm_ct <- as.POSIXct("1970-01-01 01:00", tz = "UTC")

# Internal representations
unclass(date)
#> [1] 1
unclass(dttm_ct)
#> [1] 3600
#> attr(,"tzone")
#> [1] "UTC"
```

<https://advanced-r-solutions.rbind.io/vectors#lists>
Key is super complex. Here's Casey's succinct, well-worded answer:

> [The key goes into a lot of complexity on this - both date and date-times are stored as `double` with a `class` attribute (`Date` or `POSIXct`) that helps R interpret the double values correctly. `c()` coerces based on the first element in this case; unlist loses the attribute values so really screws it all up. Perhaps just use `lubridate` instead!]{.answer}

## 3.6 Data frames and tibbles

Sped through this one because I know it the best :,,)

`stringsAsFactors = FALSE` is important

tibbles never coerce input ("lazy")


data frames automatically transform non-syntactic names (unless `check.names = FALSE`), tibbles do not (although they do print non-syntactic names surrounded by `)

Interesting recycling behavior:

```{r}
test_df <- data.frame(x = 1:4, y = 1:2)
test_df
#>   x y
#> 1 1 1
#> 2 2 2
#> 3 3 1
#> 4 4 2
data.frame(x = 1:4, y = 1:3)
#> Error in data.frame(x = 1:4, y = 1:3): arguments imply differing number of
#> rows: 4, 3

tibble(x = 1:4, y = 1)
#> # A tibble: 4 x 2
#>       x     y
#>   <int> <dbl>
#> 1     1     1
#> 2     2     1
#> 3     3     1
#> 4     4     1
tibble(x = 1:4, y = 1:2)
#> Error: Tibble columns must have compatible sizes.
#> * Size 4: Existing data.
#> * Size 2: Column `y`.
#> ℹ Only values of size one are recycled.
```


Tibbles allow you to refer to variables created during construction:
```{r}
tibble(
  x = 1:3,
  y = x * 2
)
#> # A tibble: 3 x 2
#>       x     y
#>   <int> <dbl>
#> 1     1     2
#> 2     2     4
#> 3     3     6
```


Rownames must be unique


You can subset a data frame or a tibble like a 1D structure (where it behaves like a list), or a 2D structure (where it behaves like a matrix).

Data frames return vectors if you only select 1 column (fix with `drop = FALSE` when using `[`)

if you do `df$x` and there is no `x` but another column *starts* with `x`, it selects that. if none start with `x`, returns `NULL`]

"[ always returns a tibble, and a $ doesn’t do partial matching and warns if it can’t find a variable (this is what makes tibbles surly)"

```{r}
df1 <- data.frame(xyz = "a")
df2 <- tibble(xyz = "a")

str(df1$x)
#>  chr "a"
str(df2$x)
#> Warning: Unknown or uninitialised column: `x`.
#>  NULL
```

> "A tibble’s insistence on returning a data frame from [ can cause problems with legacy code, which often uses df[, "col"] to extract a single column. If you want a single column, I recommend using df[["col"]]. This clearly communicates your intent, and works with both data frames and tibbles."

### 3.6.6 List columns

A data frame is a list of vectors, so it can have a column that is a list (which is a vector). So you can put any object in a data frame!

"List-columns are allowed in data frames but you have to do a little extra work by either adding the list-column after creation or wrapping the list in I()":

```{r}
df <- data.frame(x = 1:3)
df$y = list(1:2, 1:3, 1:4)
df # x looks normal (1, 2, 3), y elements point to (or contain?) lists <int [2]>	, etc. 

data.frame(
  x = 1:3,
  y = I(list(3:4, 2:4, 1:4)) 
  # Casey note: I(): AsIs - treat the object as is, i.e., inhibit coercion
)
```

list columns are easier to use with tibbles - can be directly included in `tibble()`, printed tidily:

```{r}
tibble(
  x = 1:3, 
  y = list(1:2, 1:3, 1:4)
)
#> # A tibble: 3 x 2
#>       x y        
#>   <int> <list>   
#> 1     1 <int [2]>
#> 2     2 <int [3]>
#> 3     3 <int [4]>
```

### 3.6.7 Matrix and data frame columns

If number of rows matched, you can have matrix or array as a column of a df. `NROW()` must be equal, not `length()`. 

"As for list-columns, you must either add it after creation, or wrap it in I()."

```{r}
dfm <- data.frame(
  x = 1:3 * 10
)
dfm$y <- matrix(1:9, nrow = 3)
dfm$z <- data.frame(a = 3:1, b = letters[1:3], stringsAsFactors = FALSE)

str(dfm)
#> 'data.frame':    3 obs. of  3 variables:
#>  $ x: num  10 20 30
#>  $ y: int [1:3, 1:3] 1 2 3 4 5 6 7 8 9
#>  $ z:'data.frame':   3 obs. of  2 variables:
#>   ..$ a: int  3 2 1
#>   ..$ b: chr  "a" "b" "c"
```

Matrix and data frame columns might screw up some functions that assume every column is a vector.

### 3.6.8 Exercises

Can you have a data frame with zero rows? What about zero columns?

>[yes, you can have an empty data frame]{.answer}

What happens if you attempt to set rownames that are not unique?

>[guess: it gets angry (throws u a duplicate row.names error):)... appends .1, .2, etc. if you're subsetting ]{.answer}

If df is a data frame, what can you say about t(df), and t(t(df))? Perform some experiments, making sure to try different column types.

>[transposes it -- flips rows and columns (at least with ints -- col 1 becomes row 1, col 2 becomes row 2. If you do it twice, goes back to normal.)]{.answer}

```{r}
# > test_df <- data.frame(x = 1:4, y = 1:2)
# > test_df
#   x y
# 1 1 1
# 2 2 2
# 3 3 1
# 4 4 2
# > t(test_df)
#   [,1] [,2] [,3] [,4]
# x    1    2    3    4
# y    1    2    1    2
# > t(t(test_df))
#      x y
# [1,] 1 1
# [2,] 2 2
# [3,] 3 1
# [4,] 4 2

tt <- data.frame(first_col = c("apples", "bananas"), second_col = c("dogs", "cats"))
tt

is.matrix(tt)
# [1] FALSE
is.matrix(t(tt))
# [1] TRUE
is.matrix(t(t(tt)))
# [1] TRUE

tt_int <- data.frame(first_col = c("apples", "bananas"), second_col = c(1, 2))
tt_int %>% gt::gt()
t(tt_int) # coerces to character
is.matrix(t(tt_int))
#            [,1]     [,2]     
# first_col  "apples" "bananas"
# second_col "dogs"   "cats"  

# > t(t(tt))
#      first_col second_col
# [1,] "apples"  "dogs"    
# [2,] "bananas" "cats" 
```


What does as.matrix() do when applied to a data frame with columns of different types? How does it differ from data.matrix()?

>[]{.answer}

```{r}
pet_preferences <- data.frame(
  pet = c("goldendoodle", "spotted gecko", "neon tetra"),
  owner = c("Anna", "Billy", "Charlie"),
  age = c(10, 2, 1)
)

pet_preferences

pet_matrix_test <- as.matrix(pet_preferences)
pet_matrix_test
str(pet_matrix_test)


pet_matrix <- data.matrix(
  pet = c("goldendoodle", "spotted gecko", "neon tetra"),
  owner = c("Anna", "Billy", "Charlie"),
  age = c(10, 2, 1)
)
```

**textbook answer:**

A: The type of the result of as.matrix depends on the types of the input columns (see ?as.matrix):

>The method for data frames will return a character matrix if there is only atomic columns and any non-(numeric/logical/complex) column, applying as.vector to factors and format to other non-character columns. Otherwise the usual coercion hierarchy (logical < integer < double < complex) will be used, e.g. all-logical data frames will be coerced to a logical matrix, mixed logical-integer will give an integer matrix, etc.

On the other hand, data.matrix will always return a numeric matrix (see ?data.matrix()).

>Return the matrix obtained by converting all the variables in a data frame to numeric mode and then binding them together as the columns of a matrix. Factors and ordered factors are replaced by their internal codes. […] Character columns are first converted to factors and then to integers.

```{r}
df_coltypes <- data.frame(
  a = c("a", "b"),
  b = c(TRUE, FALSE),
  c = c(1L, 0L),
  d = c(1.5, 2),
  e = factor(c("f1", "f2"))
)

as.matrix(df_coltypes)
#>      a   b       c   d     e   
#> [1,] "a" "TRUE"  "1" "1.5" "f1"
#> [2,] "b" "FALSE" "0" "2.0" "f2"
data.matrix(df_coltypes)
#>      a b c   d e
#> [1,] 1 1 1 1.5 1
#> [2,] 2 0 0 2.0 2
```


## 3.7 `NULL`

`NULL` is closely related to vectors; has a unique type, is always length zero, and cannot have attributes.

```{r}
typeof(NULL)
length(NULL)
```

```{r eval = FALSE}
x <- NULL
attr(x, 'thing') <- 'value'
# Error in `attr(x, "thing") <- "value"`:
# ! attempt to set an attribute on NULL
```

Two common uses:

-   represent an empty vector
-   represent an absent vector - this is common as a default function argument. Contrast with `NA` which means an *element* of a vector is absent, while `NULL` means the entire vector is absent.
