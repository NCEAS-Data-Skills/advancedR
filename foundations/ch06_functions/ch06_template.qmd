---
title: "Chapter 6: Functions -- Notes & Exercises"
format: 
  html:
    toc: true
    embed-resources: true
engine: knitr
code-overflow: wrap
editor: source
---

## Setup

-   Update file name, add author field as appropriate

-   Feel free to customize this template as much as you'd like!

-   yaml and setup chunk adapted from Casey O'Hara and Nick J Lyon

```{r libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(purrr)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

# 6 Functions

From [Chapter 6](https://adv-r.hadley.nz/functions.html#functions) in the second edition of [Advanced R](https://adv-r.hadley.nz/index.html) by Hadley Wickham.

Answers for all exercises can be found in [Chapter 5](https://advanced-r-solutions.rbind.io/functions) in the second edition of [Advanced R Solutions](https://advanced-r-solutions.rbind.io/)

## 6.1 Introduction

## 6.2 Function Fundamentals

### 6.2.1 Function components

### 6.2.2 Primitive functions

### 6.2.3 First-class functions

### 6.2.4 Invoking a function

### 6.2.5 Exercises

1.  Given a name, like `"mean"`, [`match.fun()`](https://rdrr.io/r/base/match.fun.html) lets you find a function. Given a function, can you find its name? Why doesn't that make sense in R?

>[]{.answer}


2.  It's possible (although typically not useful) to call an anonymous function. Which of the two approaches below is correct? Why?

```{r}         
function(x) 3()
#> function(x) 3()
(function(x) 3)()
#> [1] 3
```

>[]{.answer}


3.  A good rule of thumb is that an anonymous function should fit on one line and shouldn't need to use `{}`. Review your code. Where could you have used an anonymous function instead of a named function? Where should you have used a named function instead of an anonymous function?

>[]{.answer}


4.  What function allows you to tell if an object is a function? What function allows you to tell if a function is a primitive function?

>[]{.answer}


5.  This code makes a list of all functions in the base package.

```{r}         
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
```

  Use it to answer the following questions:

   a.  Which base function has the most arguments?
    
  >[]{.answer}

    b.  How many base functions have no arguments? What's special about those functions?
    
  > []{.answer}

    c.  How could you adapt the code to find all primitive functions?
    
  >[]{.answer}


6.  What are the three important components of a function?

>[]{.answer}


7.  When does printing a function not show the environment it was created in?

>[]{.answer}



## 6.3 Function Composition



## 6.4 Lexical Scoping


### 6.4.1 Name masking


### 6.4.2 Functions versus variables


### 6.4.3 A fresh start


### 6.4.4 Dynamic lookup


### 6.4.5 Exercises


1.    What does the following code return? Why? Describe how each of the three c's is interpreted.

```{r}
c <- 10
c(c = c)
```

>[]{.answer}


2.   What are the four principles that govern how R looks for values?

>[]{.answer}


3.  What does the following function return? Make a prediction before running the code yourself.

```{r}
f <- function(x) {
  f <- function(x) {
    f <- function() {
      x ^ 2
    }
    f() + 1
  }
  f(x) * 2
}
f(10)
```


>[]{.answer}


## 6.5 Lazy Evaluation

### 6.5.1 Promises


### 6.5.2 Default arguments


### 6.5.3 Missing arguments


### 6.5.4 Exercises

1.    What important property of `&&` makes `x_ok()` work?

```{r}
x_ok <- function(x) {
  !is.null(x) && length(x) == 1 && x > 0
}

x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
```

>[]{.answer}


What is different with this code? Why is this behaviour undesirable here?

```{r}
x_ok <- function(x) {
  !is.null(x) & length(x) == 1 & x > 0
}

x_ok(NULL)
#> logical(0)
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE FALSE FALSE
```

>[]{.answer}


2.    What does this function return? Why? Which principle does it illustrate?

```{r}
f2 <- function(x = z) {
  z <- 100
  x
}
f2()
```

>[]{.answer}


3.    What does this function return? Why? Which principle does it illustrate?

```{r}
y <- 10
f1 <- function(x = {y <- 1; 2}, y = 0) {
  c(x, y)
}
f1()
ys
```

>[]{.answer}


4.    In `hist()`, the default value of `xlim` is `range(breaks)`, the default value for breaks is `"Sturges"`, and
```{r}
range("Sturges")
#> [1] "Sturges" "Sturges"
```

Explain how `hist()` works to get a correct `xlim` value.

>[]{.answer}


5.    Explain why this function works. Why is it confusing?

```{r}
show_time <- function(x = stop("Error!")) {
  stop <- function(...) Sys.time()
  print(x)
}
show_time()
#> [1] "2021-02-21 19:22:36 UTC"
```

>[]{.answer}

6.    How many arguments are required when calling `library()`?

>[]{.answer}



## 6.6 `...` (dot-dot-dot)

### 6.6.1 Exercises

1.    Explain the following results:

```{r}
sum(1, 2, 3)
#> [1] 6
mean(1, 2, 3)
#> [1] 1

sum(1, 2, 3, na.omit = TRUE)
#> [1] 7
mean(1, 2, 3, na.omit = TRUE)
#> [1] 1
```

>[]{.answer}


2.    Explain how to find the documentation for the named arguments in the following function call:

```{r}
plot(1:10, col = "red", pch = 20, xlab = "x", col.lab = "blue")
```

>[]{.answer}


3.    Why does `plot(1:10, col = "red")` only colour the points, not the axes or labels? Read the source code of `plot.default()` to find out.

>[]{.answer}


## 6.7 Exiting a Function


### 6.7.1 Implicit versus explicit returns



### 6.7.2 Invisible values



### 6.7.3 Errors



### 6.7.4 Exit handlers



### 6.7.5 Exercises

1.    What does `load()` return? Why don't you normally see these values?

>[]{.answer}

2.    What does `write.table()` return? What would be more useful?

>[]{.answer}

3.    How does the chdir parameter of `source()` compare to `with_dir()`? Why might you prefer one to the other?

>[]{.answer}

4.    Write a function that opens a graphics device, runs the supplied code, and closes the graphics device (always, regardless of whether or not the plotting code works).

>[]{.answer}

5.    We can use `on.exit()` to implement a simple version of `capture.output()`.

```{r}
capture.output2 <- function(code) {
  temp <- tempfile()
  on.exit(file.remove(temp), add = TRUE, after = TRUE)

  sink(temp)
  on.exit(sink(), add = TRUE, after = TRUE)

  force(code)
  readLines(temp)
}
capture.output2(cat("a", "b", "c", sep = "\n"))
#> [1] "a" "b" "c"
```

Compare `capture.output()` to `capture.output2()`. How do the functions differ? What features have I removed to make the key ideas easier to see? How have I rewritten the key ideas so they're easier to understand?

>[]{.answer}

## 6.8 Function Forms


### 6.8.1 Rewriting to prefix form


### 6.8.2 Prefix form


### 6.8.3 Infix functions


### 6.8.4 Replacement functions


### 6.8.5 Special forms


### 6.8.6 Exercises

1.    Rewrite the following code snippets into prefix form:

```{r}
1 + 2 + 3

1 + (2 + 3)

if (length(x) <= 5) x[[5]] else x[[n]]
```


```{r}

```


2.    Clarify the following list of odd function calls:

```{r}
x <- sample(replace = TRUE, 20, x = c(1:10, NA))
y <- runif(min = 0, max = 1, 20)
cor(m = "k", y = y, u = "p", x = x)
```

>[]{.answer}

3.    Explain why the following code fails:

```{r}
modify(get("x"), 1) <- 10
#> Error: target of assignment expands to non-language object
```

>[]{.answer}

4.    Create a replacement function that modifies a random location in a vector.


```{r}

```

>[]{.answer}

5.    Write your own version of `+` that pastes its inputs together if they are character vectors but behaves as usual otherwise. In other words, make this code work:

```{r}
1 + 2
#> [1] 3

"a" + "b"
#> [1] "ab"
```

>[]{.answer}

6.    Create a list of all the replacement functions found in the base package. Which ones are primitive functions? (Hint: use `apropos()`.)


>[]{.answer}

7.    What are valid names for user-created infix functions?

>[]{.answer}

8.    Create an infix xor() operator.


```{r}

```


9.    Create infix versions of the set functions `intersect()`, `union()`, and `setdiff()`. You might call them `%n%`, `%u%`, and `%/%` to match conventions from mathematics.


```{r}

```

