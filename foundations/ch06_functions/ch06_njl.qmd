
```{r 06-libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(purrr)
```

### 6.2 Function Fundamentals

Functions are fundamentally composed of (1) arguments, (2) body, and (3) environment. _Except_ primitive functions implemented purely in C.

#### 6.2.1 Function Components

Can check arguments, body, and environment with `formals()`, `body()`, and `environment()` respectively.

#### 6.2.2 Primitive Functions

Primitive functions have type "builtin" or "special".

```{r 06-fundament_primitives}
typeof(x = sum)
typeof(x = `[`)
```

Primitive functions are faster but at the cost of interpretability (both reading and writing).

#### 6.2.3 First-Class Functions

R functions are objects in and of themselves (this is known as "first-class functions"). While some other languages have special conventions for creating functions, R supports simple assignment as with all other objects--albeit with structural requirements for the function to _be_ a function and work as intended.

You can create functions without binding them to a name (resulting in "anonymous functions") or add functions to a list and then invoke them with `list_obj$fxn_name(arguments)`

#### 6.2.4 Invoking a Function

You can invoke a function by putting values inside of function parentheses (with or without naming arguments) or by storing the arguments in a data structure and using `do.call()` on that. For example:

```{r 06-fundament_invoke}
args_list <- list(1:10, na.rm = T)

do.call(what = mean, args = args_list)
```

#### 6.2.5 Exercises

1. Given a name, like `"mean"`, `match.fun()` lets you find a function. Given a function, can you find its name? Why doesn't this make sense in R?

[It is not clear what "given a function" means other than the name of a function. Also, just practically, if you had 'the function' why would you need to find it?]{.answer}

2. It's possible (though typically not useful) to call an anonymous function. Which of the two approaches below is correct? Why?

```{.r 06-fundament_q2}
function(x) 3()
(function(x) 3)()
```

[The second approach is correct. In the second instance, essentially a nameless function that returns `3` is created (see the wrapping parentheses starting in the first character) and then invoked (via the empty parentheses at the end). The second instance seems to be treating `3` as a function name in and of itself (based on the fact it is adjacent to empty parentheses).]{.answer}

3. A good rule of thumb is that an anonymous function should fit on one line and shouldn't need to use `{}`. Review your code. Where could you have used an anonymous function instead of a named function? Where should you have used a named function instead of an anonymous function?

[I don't use anonymous functions nor do I intend to as their use-case / benefit over named functions is unclear to me. I suppose simple arithmetic / `apply`-style iterative code could make use of anonymous functions.]{.answer}

4. What function allows you to tell if an object is a function? What function allows you to tell if a function is a primitive function?

[The `class` function will tell you whether an object is a function. The `typeof` function will tell you (implicitly) whether a function is primitive of not because primitive functions are all of type "builtin" or "special".]{.answer}

5. This code makes a list of all functions in the base package. Use it to answer the following questions:

```{r 06-fundament_q5}
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
```

> (A) Which base function has the most arguments?

[The `scan` function has the most arguments with 22! See below.]{.answer}

```{r 06-fundament_a5-A}
# Identify number of arguments / functions
arg_ct <- purrr::map_int(.x = funs, .f = ~ length(formals(.x)))

# Identify highest argument count
sort(x = arg_ct)[length(arg_ct)]
```

> (B) How many base functions have no arguments? What's special about those functions?

[48 functions have no arguments. See below. Note that I did need to check the answer and did not know to remove primitive functions beforehand (stating that here in the spirit of transparency).]{.answer}

```{r 06-fundament_a5-B}
# Remove primitive functions from list
non_prim_funs <- purrr::discard(.x = funs, .p = is.primitive)

# Count arguments of remaining
non_prim_arg_ct <- purrr::map_int(.x = non_prim_funs, .f = ~ length(formals(.x)))

# Identify number of non-primitive functions without arguments
sum(non_prim_arg_ct == 0, na.rm = T)
```

> (C) How could you adapt the code to find all primitive functions?

[There are 210 primitive functions. We can simply change `discard()` in our answer to 5B to `keep()` and we'll be left with a list of only primitive functions.]{.answer}

```{r 06-fundament_a5-C}
# Identify *only* primitive functions
prim_funs <- purrr::keep(.x = funs, .p = is.primitive)

# Count 'em up
length(prim_funs)
```

6. What are the three important components of a function?

[They are the function's arguments, its body, and its environment. See notes above for how to access this information.]{.answer}

7. When does printing a function not show the environment it was created in?

[Primitive functions and those not from a package (i.e., those created in the global environment), do not display their environment.]{.answer}

### 6.3 Function Composition

Can nest functions inside progressively more parentheses pairs or create intermediary objects to store results. Can also use `magrittr`'s `%>%` to chain together operations.

| Composition Type | Example | Advantage(s) | Disadvantage(s) |
|:---:|:---:|:---:|:---:|
| Nesting | `g(f(x))` | Concise; well-suited for short operations | Hard to read because of inside-outside and left-right order of operations |
| Intermediate Objects | `obj1 <- f(x); obj2 <- g(obj1)` | Valuable if intermediary objects are valuable in and of themselves; also nice for debugging / actively developing code workflow | Naming required for intermediary objects |
| Piping | `x %>% f() %>% g()` | Order of operations is more intuitive; no intermediary objects | Only works with linear transformations of a single object; requires a 3^rd^ party package and literacy of that package in code readers |

### 6.4 Lexical Scoping

"Scoping" = finding value associated with name. R uses "**lexical scoping**" in that it looks for values of names based on how a function is defined, not how it is called in a particular context. There are four primary rules discussed below.

#### 6.4.1 Scoping Rule 1: Name Masking

Essentially, names defined _inside_ of function "mask" objects with the same name created outside of the function. So if you have an `x` object and the function internally creates an `x` object, it won't consider your prior `x` object.

However, if an object is named inside of a function but not defined there / supplied to an argument, R will look one level up for an object of that name, all the way--eventually--to the global environment.

#### 6.4.2 Scoping Rule 2: Functions vs. Variables

Because functions are just another type of object, the name masking rules apply to functions as well. I.e., if a function is defined inside of another function (and shares a name with a function created outside of the nested one), the internally-created function will be prioritized.

R however does not mix up non-function objects and function objects so if a function and non-function share a name, R will use each correctly.

Note that it is bad practice to name objects (functions or otherwise) identically in your own code because it makes it hard to read / for novices to interpret.

#### 6.4.3 Scoping Rule 3: Fresh Start

Each use of a function is done in a completely different environment so that each function will behave predictably (as opposed to potentially being affected by prior uses of the same/other functions).

#### 6.4.4 Scoping Rule 4: Dynamic Lookup

R looks for values when the function is **run**, _not_ when it is defined! So you can define a function and then define variables for it to use (see the name masking rule) and when you use the function it should work.

Note that this means you won't actually get an error for typos / issues with your functions until you use them which can be a pain for debugging. Consider `findGlobals()` to identify external dependencies (i.e., unbound symbols) within a function.

#### 6.4.5 Exercises

1. What does the following code return? Why? Describe how each of the three `c`'s is interpreted.

```{r 06-scoping_q1}
#| eval: false

c <- 10
c(c = c)
```

[This code should return a named vector of length one. The value should be 10 and the name should be "c". The first `c` invokes the combine function, the `c` on the left of the equal sign specifies the name attribute for the value while the `c` on the right of the equal sign specifies the value bound in the object created above the line with three `c`'s.]{.answer}

2. What are the four principles that govern how R looks for values?

[They are all part of R's "lexical scoping" and they include (1) name masking, (2) functions vs. variables, (3) fresh start, and (4) dynamic lookup]{.answer}

3. What does the following function return? Make a prediction before running the code yourself.

[I think the code will return `202` because it will first square the provided `x`, then add 1, then multiply by 2. In effect the `10` supplied to the largest function (i.e., the one that contains the others) is passed all the way to the deepest function then the code runs from inside to outside. See the 'name masking' lexical scoping rule in particular.]{.answer}

```{r 06-scoping_q3}
f <- function(x) {
  f <- function(x) {
    f <- function() {
      x ^ 2
    }
    f() + 1
  }
  f(x) * 2
}
f(10)
```

### 6.5 Lazy Evaluation

Arguments are only evaluated if they are used (i.e., "lazily" evaluated). Useful because you can avoid intense operations unless they are needed.

#### 6.5.1 Promises

Lazy evaluation is powered by the "promise" data structure (a.k.a. "thunk"). These have three components: (1) expression that gives rise to delayed computation, (2) environment where expression should be evaluated, and (3) a value which is computed and cached the first time the promise's expression is evaluated in the specified environment.

Promises _cannot_ be interacting with because such interaction would force immediate evaluation.

#### 6.5.2 Default Arguments

Default argument values can be set (even in relation to earlier user-specified arguments) because of promises. This is not recommended though because it makes order matter a lot and that is hard to interpret.

Evaluation differs between default and user-specified arguments.

#### 6.5.3 Missing Arguments

Missing arguments need to be accounted for using some sort of conditional 'if null then ___' structure. Fortunately, laze evaluation means we don't have to worry about the intensity of the non-null computation because it'll only be used when it's needed.

#### 6.5.4 Exercises

1. What important property of `&&` makes `x_ok()` work?

```{r 06-lazy_q1}
#| eval: false

x_ok <- function(x) {
  !is.null(x) && length(x) == 1 && x > 0
}

x_ok(NULL)
#> [1] FALSE
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE
```

[It is the left-to-right evaluation of the conditions in `&&` versus `&`. The first and second instances would work the same with either `&` or `&&` but the third one we fail because the `length` is wrong so we don't waste any time checking for whether each element of the vector of `1:3` is greater than 1. See the help file for `&&` for more details.]{.answer}

What is different with this code? Why is this behaviour undesirable here?

```{r 06-lazy_q1-B}
#| eval: false

x_ok <- function(x) {
  !is.null(x) & length(x) == 1 & x > 0
}

x_ok(NULL)
#> logical(0)
x_ok(1)
#> [1] TRUE
x_ok(1:3)
#> [1] FALSE FALSE FALSE
```

[This is undesireable mostly because it means that the length of the _output_ of `x_ok()` now is tied with the length of its inputs. This means that if we wrote a different function with an 'if `x_ok()` is `TRUE` do X, otherwise do Y' conditional that condition would fail if the user specified an `x` of greater than one element.]{.answer}

2. What does this function return? Why? What principle does it illustrate?

[This function should return `100`. It demonstrates lazy evaluation, specifically default arguments. The default value of `x` is `z` which does not exist when the function is invoked but is created _before_ `x` is evaluated (hence no error)]{.answer}

```{r 06-lazy_q2}
f2 <- function(x = z) {
  z <- 100
  x
}
f2()
```

3. What does this function return? Why? Which principle does it illustrate?

[This demonstrates name masking. In effect, the contents of the curly braces (`{...}`), first define the `y` object the function body requires then--after the semicolon--define the `x`. Because R detects both an `x` and a `y`, it never looks for either the value supplied to the `y` argument or the `y` object defined outside of the function. Also, `y` the object outside of the function is unaltered because the function's body operations are performed in a separate argument from where `y` is defined at the start of the code chunk.]{.answer}

```{r 06-lazy_q3}
y <- 10
f1 <- function(x = {y <- 1; 2}, y = 0) {
  c(x, y)
}
f1()
y
```

4. In `hist()`, the default value of `xlim` is `range(breaks)`, the default value for `breaks` is `"Sturges"`. However, `range("Sturges")` returns a 2-element vector containing "Sturges" twice. Explain how `hist()` works to get a correct `xlim` value.

[`hist()`'s `xlim` argument _must_ receive a 2-element numeric vector. Thus, `hist()` uses reasonable defaults under the hood to ensure that this is the case. During evaluation it overwrites the `breaks` argument to replace "Sturges" with the necessary two-element numeric vector.]{.answer}

5. Explain why this function works. Why is it confusing?

```{r 06-lazy_q5}
#| eval: false
show_time <- function(x = stop("Error!")) {
  stop <- function(...) Sys.time()
  print(x)
}
show_time()
#> [1] "2021-02-21 19:22:36 UTC"
```

[Before the `stop` function is accessed (which would normally throw an error), a new function is bound to that name that just prints the system time. Because of name masking, the new `stop` function is accessed instead of the base R `stop` function one might expect. This occurs only because the `x` argument is defined as the error function only as a _default_ but when the function is invoked in the chunk above it uses the internally-defined faux `stop` function.]{.answer}

[This is confusing because if `stop` is called in the function invoking step (e.g., `show_time(x = stop("Error!"))` you would get the error message (because the user-specified value to the argument would take precedence over the `stop` function defined in the `show_time()` body).]{.answer}

6. How many arguments are required when calling `library()`?

[`library` in theory supports 13 arguments (see `length(formals(library))`) but it doesn't _require_ any. Run `library()` to demonstrate this to yourself. See 6.5.3 for more information on handling of missing arguments.]{.answer}

### 6.6 `...` (dot-dot-dot)

Functions can have a special argument: `...` (pronounced "dot-dot-dot"). Note that I _despise_ this and will be using the actual word ("ellipsis") for three dots for brevity's sake. Regardless of its name, the ellipsis supports any number of additional arguments. These can be used either by the 'top-level' function or passed directly to subordinate functions.

In non-R languages this is sometimes called "varags" (i.e., "variable arguments") and functions that use it are said to be "variadic".

Using `..N` allows for arguments to be accessed via their position (seems risky to me because how could you count on other users--or even future you--to consistently use the same order of arguments?).

Several use-cases (covered in future chapters of the book) but also two primary risks:

1. It's not clear to the user where the arguments passed to `...` _go_. So understanding how to use a function with a `...` argument can be non-trivial
2. Misspelled arguments are ignored / do not raise errors, so you can get some behaviors that are non-ideal

#### 6.6.1 Exercises

1. Explain the following results:

```{r 06-ellipsis_q1}
#| eval: false

sum(1, 2, 3)
#> [1] 6
mean(1, 2, 3)
#> [1] 1

sum(1, 2, 3, na.omit = TRUE)
#> [1] 7
mean(1, 2, 3, na.omit = TRUE)
#> [1] 1
```

[`sum()` evidently accepted all three numbers in the `...` argument and added them together. `mean()` interestingly only took the average of the first supplied value (evidently supplied to `...` implicitly). So far as I know, `na.omit` is not an argument supported by either `sum()` or `mean()` (the real argument is `na.rm`) so that argument is functionally 'misspelled' and ignored. If you replace one of the numbers of the second `sum()` example with `NA` you'll see it returns `NA` (not the sum of the remaining/non-missing numbers).]{.answer}

2. Explain how to find the documentation for the named arguments in the following function call:

```{r 06-ellipsis_q2}
#| eval: false

plot(1:10, col = "red", pch = 20, xlab = "x", col.lab = "blue")
```

[The named arugments in the above chunk are all passed to `plot`'s `...` argument. The help file for `plot()` directs us to `par`'s help file which contains documentation for both of those arguments (`pch` is documented under `points`).]{.answer}

3. Why does `plot(1:10, col = "red")` only colour the points, not the axes or labels? Read the source code of `plot.default()` to find out.

[`col` is inherited by the points bit of the source code of `plot.default` (see `View(plot.default)` as a start). Color of other elements can be specified in other ways but that specific argument by default only handles points. This also makes good intuitive sense because you can imagine that changing point colors is probably more common than changing color of other elements of the plot.]{.answer}

### 6.7 Exiting a Function

Most functions end either by returning a value or an error.

#### 6.7.1 Implicit vs. Explicit Returns

Implicit returns are just whatever the final value of the function happens to be. Explicit returns are those identified by `return()`.

#### 6.7.2 Invisible Values

You can prevent visible returning by wrapping the returned value in `invisible()`. More commonly, assigning the product of a function using `<-` means that the returned value is returned invisibly (i.e., only bound to that name and not printed in the Console).

#### 6.7.3 Errors

When functions cannot finish their task(s), they should return an error defined with `stop()`. More information on errors in Chapter 8.

#### 6.7.4 Exit Handlers

Content included in `on.exit()` is run whether the function succeeds or throws an error. It essentially requires the `add = T` argument.

A valuable use-case is the setting of a working directory/global options in the function followed by re-setting to them to their original values at the end of the function (necessary to make this work as desired whether or not function succeeds).

#### 6.7.5 Exercises

1. What does `load()` return? Why don't you normally see these values?

[`load()` returns objects stored as external files by `save()`. We don't see these values because they are returned invisibly by default]{.answer}

2. What does `write.table()` return? What would be more useful?

[The function returns `NULL` (it's called for its side-effect of saving files to your computer I think). Arguably it would be more useful if it returned the data to be saved so you could save intermediary outputs while continuing to work with them.]{.answer}

3. How does the `chdir` argument of `source()` compare to `with_dir()`? Why might you prefer one to the other?

[`chdir` accepts a logical value (see `?source`) so it is less flexible than the approach outlined in `with_dir()`. Note that I think it is always bad practice to set working directories because it is unlikely that any two people have identical file paths and thus the code will not be run-able by others.]{.answer}

4. Write a function that opens a graphics device, runs the supplied code, and closes the graphics device (always, regardless of whether or not the plotting code works).

[This would be accomplished with `on.exit` but I don't think this exercise is valuable (also not super well-aligned with the implicit learning objectives of this section) so I'm going to leave it at that.]{.answer}

5. We can use `on.exit()` to implement a simple version of `capture.output()`. Compare `capture.output()` to `capture.output2()`. How do the functions differ? What features have I removed to make the key ideas easier to see? How have I rewritten the key ideas so they're easier to understand?

```{r 06-exit_q5}
#| eval: false

capture.output2 <- function(code) {
  temp <- tempfile()
  on.exit(file.remove(temp), add = TRUE, after = TRUE)

  sink(temp)
  on.exit(sink(), add = TRUE, after = TRUE)

  force(code)
  readLines(temp)
}
capture.output2(cat("a", "b", "c", sep = "\n"))
#> [1] "a" "b" "c"
```

[`capture.output()` has more appropriate error checks / handling but is longer because of this. Also, `capture.output()` uses `print()` instead of `readLines()` for the output so it will likely show different things in certain contexts.]{.answer}

### 6.8 Function Forms

Four flavors of function call:

1. **prefix** -- function name before its arguments (e.g., `fxn(a, b)`)
2. **infix** -- function name comes _between_ its arguments (e.g., `x + y`)
3. **replacement** -- functions that replace values via assignment (e.g., `names(x) <- c("one", "two")`)
4. **special** -- functions like `[[`, `for`, etc. Despite not having consistent structure, they are important.

#### 6.8.1 Rewriting in Prefix Form

Functions of all types can be re-written in prefix form. Simply wrap the function name in backticks and then put the normal contents in parentheses after the name. For example: 

```{r 06-forms-prefix-rewrite}
`for`(i, 1:3, print(i))
```

#### 6.8.2 Prefix Functions

Most common type in R and extremely common in majority of programming languages. Arguments can be specified by their order, partial matches to argument names, or by their full argument name.

Never use partial matching but you can use positional specification for the first one or two arguments (in Hadley Wickham's opinion; I _never_ use positional specification because I think it impedes learning for yourself / others).

#### 6.8.3 Infix Functions

Name comes from function being between ("inside") arguments. `+` and `-` are special cases of the infix function form because they support being called with only a right-hand side argument (i.e., to explicitly make numbers negative/positive).

#### 6.8.4 Replacement Functions

Work by putting function call to the left of the `<-` (e.g., `names(x) <- "a"`). They _act_ like they modify their arguments in place but in reality they create a modified copy (can confirm with `tracemem()`).

#### 6.8.5 Special Functions

This section has several 'fun facts' but they render a lot of really important functions (e.g., `[[`, `(`, etc.) very difficult to read/interpret so I'm not seeing a good use-case.

All special functions are implemented as primitive (i.e., C) functions so printing them is not informative.

#### 6.8.6 Exercises

1. Rewrite the following code snippets into prefix form:

```{r 06-forms_q1}
#| eval: false

1 + 2 + 3

1 + (2 + 3)

if (length(x) <= 5) x[[5]] else x[[n]]
```

[See below]{.answer}

```{r 06-forms_a1}
#| eval: false

`+`(1, `+`(2, 3))

`+`(1, `+`(2, 3))

`if`(`<=`(length(x), 5), `[[`(x, 5), `[[`(x, n))
```

2. Clarify the following list of odd function calls

```{r 06-forms_q2}
x <- sample(replace = TRUE, 20, x = c(1:10, NA))
y <- runif(min = 0, max = 1, 20)
cor(m = "k", y = y, u = "p", x = x)
```

[The issue is that a mix of argument position, argument name, and argument partial name match are being used. We can clarify this by standardizing position and naming all arguments. See below.]{.answer}

```{r 06-forms_a2}
x <- sample(x = c(1:10, NA), size = 20, replace = TRUE)
y <- runif(n = 20, min = 0, max = 1)
cor(x = x, y = y, use = "pairwise.complete.obs", method = "kendall")
```

3. Explain why the following code fails:

```{r 06-forms_q3}
#| eval: false

modify(get("x"), 1) <- 10
#> Error: target of assignment expands to non-language object
```

[Because `modify` is not a replacement function so when R tries to transform it to `modify<-` it finds no corresponding function/object.]{.answer}

4. Create a replacement function that modifies a random location in a vector.

[See below]{.answer}

```{r 06-forms_a4}
# Define function
`tweak<-` <- function(x, value){
  
  x[sample(x = length(x), size = 1)] <- value
  
   return(x) }

# Showcase the function
for(i in 1:4){
  
  # Make the vector
  my_vec <- c(1:10)

  # Tweak it
  tweak(my_vec) <- "HELLO"
  
  # Print it
  print(my_vec) }
```

5. Write your own version of `+` that pastes its inputs together if they are character vectors but behaves as usual otherwise. In other words, make this code work:

```{r 06-forms_q5}
#| eval: false
1 + 2
#> [1] 3

"a" + "b"
#> [1] "ab"
```

[See below]{.answer}

```{r 06-forms_a5}
# Define function
`%concat%` <- function(p, q){
  if(all(is.numeric(p), is.numeric(q)) == T) {
    
    sum(p, q)
    
  } else { paste0(p, q) }
}

# Invoke function
1 %concat% 2
"a" %concat% "b"
"a" %concat% 2
```

6. Create a list of all the replacement functions found in the base package. Which ones are primitive functions? (Hint: use `apropos()`.)

[There are 78 replacement functions and 64 of them are primitive functions. See below]{.answer}

```{r 06-forms_a6}
replace_fxns <- apropos(what = "<-", where = T, mode = "function")
length(replace_fxns)

replace_prims <- replace_fxns[names(replace_fxns) == length(search())]
length(replace_prims)
```

7. What are valid names for user-created infix functions?

[Anything wrapped in `%` (though not `%%%`).]{.answer}

8. Create an infix `xor()` operator.

[See below]{.answer}

```{r 06-forms_a8}
`%or%` <- function(p, q)(
  xor(p, q)
)

T %or% F
F %or% F
```

9. Create infix versions of the set functions `intersect()`, `union()`, and `setdiff()`. You might call them `%n%`, `%u%`, and `%/%` to match conventions from mathematics.

[See below]{.answer}

```{r 06-forms_a9}
`%n%` <- function(p, q){ base::intersect(x = p, y = q) }
`%u%` <- function(p, q){ base::union(x = p, y = q) }
`%/%` <- function(p, q){ base::setdiff(x = p, y = q) }

x <- 1:4; y <- 3:7

x %n% y
x %u% y
x %/% y
```

