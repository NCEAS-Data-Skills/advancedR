---
title: "Chapter 5 Notes and Exercises"
format: 
  html:
    toc: true
    embed-resources: true
editor: source
---

## Setup

-   Update file name, add author field as appropriate

-   Feel free to customize this template as much as you'd like!

```{r setup}
library(lobstr)
library(bench)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

# 5 Control flow

From [Chapter 5](https://adv-r.hadley.nz/control-flow.html#control-flow) in the second edition of [Advanced R](https://adv-r.hadley.nz/index.html) by Hadley Wickham. Note: Chapter 5 is a new chapter introduced in this edition of the book.

The official answers to all exercises in this chapter can be found in [Chapter 4](https://advanced-r-solutions.rbind.io/control-flow) in the second edition of the [Advanced R Solutions](https://advanced-r-solutions.rbind.io/) textbook.

## 5.1 Introduction

### Quiz

(also available in the `quizzes` sub-folder of the `foundations` folder) 

Official answers [here](https://adv-r.hadley.nz/control-flow.html#control-flow-answers)

-   What is the difference between `if` and `ifelse()`?

>[no false action specified in `if` (just do nothing), only possible to specify in `ifelse()`.`ifelse()` used for vectors. Not sure about `if`... tbh never rly use it which might mean it's only for scalars? ]{.answer}

-   In the following code, what will the value of y be if x is TRUE? What if x is FALSE? What if x is NA?

```{r 05-quiz}
#| eval: false
y <- if (x) 3
#> TRUE: y <- 3
#> FALSE <- NULL
#> NA: <- error; missing value where T/F needed
# test
x <- NA 
y <- if (x) 3
y
```


-   What does `switch("x", x = , y = 2, z = 3)` return?

>[if x == x, do nothing, if x == y, print 2, if x == z, print 3]{.answer}
- empty = falls through to the next input

### Outline

-   Section 5.2 dives into the details of if, then discusses the close relatives `ifelse()` and `switch()`.

-   Section 5.3 starts off by reminding you of the basic structure of the for loop in R, discusses some common pitfalls, and then talks about the related while and repeat statements.

## 5.2 Choices

### 5.2.1 Invalid inputs

```{r}
if ("x") 1
#> Error in if ("x") 1: argument is not interpretable as logical
if (logical()) 1
#> Error in if (logical()) 1: argument is of length zero
if (NA) 1
#> Error in if (NA) 1: missing value where TRUE/FALSE needed
```


### 5.2.2 Vectorised `if`

```{r}
x <- 1:10
# %% = modlus (divide w remainder)
ifelse(x %% 5 == 0, "XXX", as.character(x))
#>  [1] "1"   "2"   "3"   "4"   "XXX" "6"   "7"   "8"   "9"   "XXX"

ifelse(x %% 2 == 0, "even", "odd")
#>  [1] "odd"  "even" "odd"  "even" "odd"  "even" "odd"  "even" "odd"  "even"
```


### 5.2.3 `switch()` statement

- replace longer if/else statements, remember that empty argument = fall through to the next one. 

```{r}
legs <- function(x) {
  switch(x,
    cow = ,
    horse = ,
    dog = 4,
    human = ,
    chicken = 2,
    plant = 0,
    stop("Unknown input")
  )
}
legs("cow")
#> [1] 4
legs("dog")
#> [1] 4
```


### 5.2.4 Exercises

1.  What type of vector does each of the following calls to [`ifelse()`](https://rdrr.io/r/base/ifelse.html) return?

```{r}
# ifelse(test, yes, no)
# 
# test -- an object which can be coerced to logical mode.
# yes	-- return values for true elements of test.
# no -- return values for false elements of test.
# If yes or no are too short, their elements are recycled. yes will be evaluated if and only if any element of test is true, and analogously for no.

# Returns Value:
# A vector of the same length and attributes (including dimensions and "class") as test and data values from the values of yes or no. The mode of the answer will be coerced from logical to accommodate first any values taken from yes and then any values taken from no.

ifelse(TRUE, 1, "no") # 1, double
ifelse(FALSE, 1, "no") # no, character
ifelse(NA, 1, "no") # NA ?, logical
```

Read the documentation and write down the rules in your own words.

>[`felse(test, yes, no)`: if test is true, return "yes" values; if false, return "no" values; output vector will be the same class as the return value.]{.answer}

2.  Why does the following code work?

```{r}
x <- 1:10
if (length(x)) "not empty" else "empty"
#> [1] "not empty"

x <- numeric()
if (length(x)) "not empty" else "empty"
#> [1] "empty"
```

>[`length(x)` is not NA, doesn't specify condition, so expects numeric value (1 = true, 0 = false, except it's just 0 = false. In this case, length(x) != 0, it = 10, so the "yes" or `TRUE` condition value is returned.) When we take the `length(x)` and `x <- numeric()`, the empty vector returns 0, so `FALSE` condition's value is output.]{.answer}

Documentation: "`if` returns the value of the expression evaluated, or NULL invisibly if none was (which may happen if there is no else)."

## 5.3 Loops

### 5.3.1 Common pitfalls

>There are three common pitfalls to watch out for when using for. First, if you’re generating data, make sure to preallocate the output container. Otherwise the loop will be very slow; see Sections 23.2.2 and 24.6 for more details. The vector() function is helpful here.

```{r}
means <- c(1, 50, 20)
out <- vector("list", length(means))
for (i in 1:length(means)) {
  out[[i]] <- rnorm(10, means[[i]])
}
```


Next, beware of iterating over 1:length(x), which will fail in unhelpful ways if x has length 0:


```{r}
means <- c()
out <- vector("list", length(means))
for (i in 1:length(means)) {
  out[[i]] <- rnorm(10, means[[i]])
}
#> Error in rnorm(10, means[[i]]): invalid arguments
```


This occurs because : works with both increasing and decreasing sequences:

```{r}
1:length(means)
#> [1] 1 0
```

Use seq_along(x) instead. It always returns a value the same length as x.


Finally, you might encounter problems when iterating over S3 vectors, as loops typically strip the attributes:

```{r}
xs <- as.Date(c("2020-01-01", "2010-01-01"))
for (x in xs) {
  print(x)
}
#> [1] 18262
#> [1] 14610
```


Work around this by calling `[[` yourself:

```{r}
for (i in seq_along(xs)) {
  print(xs[[i]])
}
#> [1] "2020-01-01"
#> [1] "2010-01-01"
```




### 5.3.2 Related tools


for loops are useful if you know in advance the set of values that you want to iterate over. If you don’t know, there are two related tools with more flexible specifications:

*   `while(condition) action`: performs action while condition is `TRUE.`

*   `repeat(action):` repeats action forever (i.e. until it encounters break).

R does not have an equivalent to the do `{action}` while `(condition)` syntax found in other languages.


>You can rewrite any for loop to use while instead, and you can rewrite any while loop to use repeat, but the converses are not true. That means while is more flexible than for, and repeat is more flexible than while. It’s good practice, however, to use the least-flexible solution to a problem, so you should use for wherever possible.


Generally speaking you shouldn’t need to use for loops for data analysis tasks, as map() and apply() already provide less flexible solutions to most problems. (covered more in Ch. 9)

### 5.3.3 Exercises

1.  Why does this code succeed without errors or warnings?

```{r}
x <- numeric()
# vector(mode = "logical", length = 0)
# vector(mode = "list", length = length(numeric()) )
out <- vector("list", length(x)) # like initializing an empty numeric list of length(0)
for (i in 1:length(x)) { # counts from 1:0, but we don't even have a 1st position to index into since the list is empty w length 0
  out[i] <- x[i] ^ 2
  # when i = 1, out of bound indexing, returns NA
}
out
# [[1]]
# [1] NA


length(list())
#> [1] 0
```

>[got confused about why the second loop through worked...here's the official answer: 
"In the next iteration, x[0] will return numeric(0) (zero indexing for atomics). Again, squaring doesn’t change the value and numeric(0) is assigned to out[0] (zero indexing for lists). Assigning a 0-length vector to a 0-length subset works but doesn’t change the object.
Overall, the code works, because each step includes valid R operations (even though the result may not be what the user intended)."
]{.answer}

2.  When the following code is evaluated, what can you say about the vector being iterated?

```{r}
xs <- c(1, 2, 3)
for (x in xs) {
  xs <- c(xs, x * 2)
}
xs
#> [1] 1 2 3 2 4 6
```

>[offical answer: In this loop x takes on the values of the initial xs (1, 2 and 3), indicating that it is evaluated just once in the beginning of the loop, not after each iteration. (Otherwise, we would run into an infinite loop.)]{.answer}

3.  What does the following code tell you about when the index is updated?

```{r}
for (i in 1:3) {
  i <- i * 2
  print(i) 
}
#> [1] 2
#> [1] 4
#> [1] 6
```

>[at the beginning of the loop]{.answer}
