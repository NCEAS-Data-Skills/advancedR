---
title: "Chapter 5: Control Flow -- Notes & Exercises"
author: "Nick J Lyon"
format: html
engine: knitr
code-overflow: wrap
---

```{r libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(purrr)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

## 5.2 Choices

Basic form `if` in R is as follows:

```{r 05-choices_if}
#| eval: false

if (condition) true_action else false_action
```

If either the `if` or `else` actions require multiple steps they are wrapped in `{` (though even simple actions are sometimes wrapped in `{` for clarity).

`if` without a clear "false action" invisibly returns `NULL` when the condition is not met.

### 5.2.1 Invalid Inputs

`if` must evaluate to `TRUE` or `FALSE` to work (so non-logical values and/or missing values cause errors). Vectors of greater than length 1 return a warning and `if` only evaluates the first element.

### 5.2.2 Vectorized `if`

If you have multiple elements and want `if` to act on each (separately) you can use `ifelse` which looks more like a standard function (in that it has clearly-defined arguments). Note that `ifelse` should only be used when both the `yes` and `no` outputs are the same type because otherwise the output can be tough to predict.

`dplyr::case_when` is an alternative to `ifelse` that can handle any number of condition vector pairs.

### 5.2.3 `switch()` Statements

`switch()` is a compact replacement for code with many `else if` alternates. For instance, the following two code chunks are equivalent.

```{r 05-choices_else-if}
#| eval: false

if (x == "a") {
    "option 1"
  } else if (x == "b") {
    "option 2" 
  } else if (x == "c") {
    "option 3"
  } else {
    stop("Invalid `x` value")
  }
```

```{r 05-choices_switch}
#| eval: false

switch(x,
  a = "option 1",
  b = "option 2",
  c = "option 3",
  stop("Invalid `x` value")
)
```

**Note that the final component of `switch` _must_ throw an error.**

### 5.2.4 Exercises

1. What type of vector does each of the following calls to `ifelse()` return?

```{r 05-choices-exercises_q1}
#| eval: false

ifelse(TRUE, 1, "no")
ifelse(FALSE, 1, "no")
ifelse(NA, 1, "no")
```

[First returns `1`, second returns `"no"`, third returns `NA`. Note that while it isn't technically necessary, defining the arguments of `ifelse` (`test`, `yes`, and `no`) makes the expected outcomes _much_ easier to predict (in my opinion).]{.answer}

```{r 05-choices-exercises_a1}
#| eval: false

ifelse(test = TRUE, yes = 1, no = "no")
ifelse(test = FALSE, yes = 1, no = "no")
ifelse(test = NA, yes = 1, no = "no")
```

2. Why does the following code work?

```{r 05-choices-exercises_q2}
x <- 1:10
if (length(x)) "not empty" else "empty"

x <- numeric()
if (length(x)) "not empty" else "empty"
```

[Because `length()` returns an integer so the condition actually being evaluated by `if` is essentially 'is this number any non-zero number (i.e., `TRUE`) or zero (i.e., `FALSE`)?' The length of an empty vector (as in the second case) is zero so the 'false action' is performed.]{.answer}

## 5.3 Loops

One iteration of a loop can be skipped with `next` or the entire loop can be exited with `break`.

### 5.3.1 Common Pitfalls

| **Issue** | **Solution** |
|:---:|:---:|
| no container for loop outputs | pre-allocate before starting loop |
| `1:length(x)` behaves unexpectedly when `x` has length 0 | use `seq_along(x)` instead |
| S3 vectors defined by their attributes (e.g., Dates, etc.) getting stripped to atomic core by loop | Work around by using `[[` yourself (e.g., `x[[i]]`) |

### 5.3.2 Related Tools

`while` loops go until their condition is no longer `TRUE`. `repeat` loops go until they encounter a `break`. `for` loops can be re-written as `while` loops which themselves can be modified into `repeat` loops but the reverse is not true. This means that in terms of flexibility, `for` loops are the least flexible, `while`s are slightly more flexible, and `repeat`s are the most flexible.

_Wild_ quote that I'm interested to learn more about:

> "Generally speaking <u>you shouldn't need to use for loops for data analysis tasks</u>, as `map()` and `apply()` already provide less flexible solutions to most problems. You'll learn more in Chapter 9." _\[Emphasis mine\]_

### 5.3.3 Exercises

1. Why does this code succeed without errors or warnings?

```{r 05-loops-exercises_q1}
x <- numeric()
out <- vector("list", length(x))
for (i in 1:length(x)) {
  out[i] <- x[i] ^ 2
}
out
```

[Because the first run of the loop actually works! When `i` is 1 (in the first iteration of the loop), the i^th^ element of `x` is `NA`, the square of which is still `NA` which is then assigned to the first element of the `out` list. When `i` is 0 (second loop iteration), the i^th^ element of `x` is a 0-length vector because there is no "0^th^" element of a vector. This empty vector is then added to the 0^th^ position of the `out` list which means it is essentially not added. Technically none of these steps actually cause errors/warnings--they're just unlikely to be what you want.]{.answer}

2. When the following code is evaluated, what can you say about the vector being iterated?

```{r 05-loops-exercises_q2}
#| eval: false

xs <- c(1, 2, 3)
for (x in xs) {
  xs <- c(xs, x * 2)
}
xs
```

[I find the phrasing of this question sort of opaque but I guess you could say that the vector is effectively adding on to itself. If this were a `while` or `repeat` loop it would go forever (in its current format) because the vector provided in the start of the loop would keep getting longer. More generally, the vector is a numeric (double) vector.]{.answer}

3. What does the following code tell you about when the index is updated?

```{r 05-loops-exercises_q3}
#| eval: false

for (i in 1:3) {
  i <- i * 2
  print(i) 
}
```

[Again, bizarre question phrasing but I think what this question is driving at is that the `i` is defined against the _original_ vector even though the `i` object itself is overwritten in each run of the loop. Said another way, you might expect the guts of the loop to make the third iteration of the loop use an `i` of _four_ instead of _three_ because 4 is assigned to `i` in the run of the loop where `i` starts at 2. Instead we can see that the third iteration of the loop stays true to the original vector supplied in the `for` parentheses.]{.answer}
