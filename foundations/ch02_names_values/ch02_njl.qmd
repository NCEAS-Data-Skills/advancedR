---
title: "Chapter 2: Names & Values -- Notes"
author: "Nick J Lyon"
format: html
engine: knitr
code-overflow: wrap
---

```{r libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(lobstr, bench)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

## 2.2 Binding Basics

Objects are not the same as their names. In the following code, two things are happening: (1) an object is created that is a vector of values and (2) that object is bound to the name `x`.

```{r 02-bind-note_make-obj}
x <- c(1, 2, 3)
```

Names can be thought of as references to a particular value. If you run the following code _you do not get another copy of the value,_ instead <u>you get another binding to the existing object</u>.

```{r 02-bind-note_copy-obj}
y <- x
```

We can confirm this by checking both objects' "memory addresses". These are the unique identifiers indicating where in the computer's memory a particular object is stored. This uses functions from the `lobstr` package.

We can see in the following code that even though the objects have different names, they have the same memory address.

```{r 02-bind-note_check-mem-address}
lobstr::obj_addr(x = x)
lobstr::obj_addr(x = y)
```

Note that R strictly enforces the use of **syntactic names**. These are names that consist of some combination of letters, numbers, `.`, and/or `_` (but do not begin with `.` or `_`). Also there are certain <u>reserved words</u> (e.g., `TRUE`, `NULL`, `function`, etc.) that are not valid names even though they are comprised of valid characters. A full list of these reserved names can be returned by running `?Reserved`.

These rules can be overridden by surrounding the desired name with backticks (\`) but doing so is cumbersome in the long run.

### 2.2.2 Exercises

1. Explain the relationship between `a`, `b`, `c`, and `d` in the following code:

```{r 02-bind_q1}
a <- 1:10
b <- a
c <- b
d <- 1:10
```

[`a`, `b`, and `c` are all different names for the same object. Despite containing the same values, `d` is a name for a different object.]{.answer}

```{r 02-bind_a1}
lobstr::obj_addr(x = a); lobstr::obj_addr(x = b); lobstr::obj_addr(x = c)
lobstr::obj_addr(x = d)
```

2. The following code accesses the mean function in multiple ways. Do they all point to the same underlying function object? Verify this with `lobstr::obj_addr()`.

```{r 02-bind_q2}
#| eval: false
mean
base::mean
get("mean")
evalq(mean)
match.fun("mean")
```

[They do all point at the same function. This is supported by the fact they share memory addresses.]{.answer}

```{r 02-bind_a2}
lobstr::obj_addr( x = mean ); lobstr::obj_addr( x = base::mean ); lobstr::obj_addr( x = get("mean") ); lobstr::obj_addr( x = evalq(mean) ); lobstr::obj_addr( x = match.fun("mean") )
```

3. By default, base R data import functions, like `read.csv()`, will automatically convert non-syntactic names to syntactic ones. Why might this be problematic? What option allows you to suppress this behaviour?

[This is problematic when crucial information is contained in the invalid characters. For instance, a column might have a percent symbol (`%`) to indicate the units of the column but the syntactically valid variant of the column would lose that unit information. This behavior can be turned off by the `check.names` argument of `read.csv`.]{.answer}

4. What rules does `make.names()` use to convert non-syntactic names into syntactic ones?

[Invalid characters are replaced by periods, an "X" is prepended if necessary, and reserved words have a period preprended. Missing values are replaced with "NA". If `unique = TRUE` then numbers will be appended to non-unique names (after being made syntactic).]{.answer}

5. I slightly simplified the rules that govern syntactic names. Why is `.123e1` not a syntactic name? Read `?make.names` for the full details.

[It evaluates to a number in scientific notation (`1.23`). `make.names` preprends an "X" to make it syntactically valid]{.answer}

## 2.3 Copy-on-Modify

Anyone who has worked with R has noticed that when you create a new object by modifying an existing one, you don't affect the original one. This is because of R's **copy-on-modify** behavior, where R creates a copy of the first object then binds it to the new name. This might be paraphrased as R's objects being _immutable_, though their are exceptions.

Note that this is an important difference from `fontawesome::fa(name = "python", a11y = "sem")` Python's default behavior. `fontawesome::fa(name = "python", a11y = "sem")` Python requires you to use the `.copy()` method or changes to a downstream object affect the values bound to the original name.

### 2.3.1 `tracemem()`

In R, we can trace when a given object is copied (and from what) using the `base::tracemem()` function. Note this doesn't work as expected in RStudio so you'll need to use the Terminal or R directly to experiment. Also, remember to use `base::untracemem()` when you're done to stop getting the memory address / object history for every line of code!

### 2.3.3 Lists

Instead of storing the values themselves, each element of a list stores references to the values it "contains". This means that modifying one element of a list means that the unchanged elements of both lists (old and new) share memory addresses with their counterpart in the other list while the changed elements have different memory addresses. There's a really nice diagram of this in [Section 2.3.3](https://adv-r.hadley.nz/names-values.html#list-references).

We can use `lobstr::ref()` to demonstrate this. Note how the two lists have different memory addresses as a whole but the first two elements (i.e., the unchanged ones) _share_ memory addresses but the final memory address (i.e., the modified one) differs between the two lists.

```{r 02-copy-mod-note_list-mem-address}
# Make two lists (one is a copy of the other)
l1 <- list(1, 2, 3)
l2 <- l1

# Modify one element of the copy
l2[[3]] <- 4

# Check the memory addresses of all elements of both lists
lobstr::ref(l1)
lobstr::ref(l2)
```

### 2.3.4 Dataframes

Dataframes are lists of vectors (i.e., columns) which has an important consequence for copy-on-modify and where in computer memory objects are stored. If you modify a _column_ only that column needs a new object in computer memory. However, if you modify a _row_, **every** column is modified and all must be stored as new objects.

### 2.3.6 Exercises

1. Why is `tracemem(1:10)` not useful?

[Because no name is bound to those values so no persistent computer memory is allocated.]{.answer}

2. Explain why `tracemem()` shows two copies when you run this code. Hint: carefully look at the difference between this code and the code shown earlier in the section.

```{r 02-copy-mod_q2}
#| eval: false

x <- c(1L, 2L, 3L)
tracemem(x)

x[[3]] <- 4
```

[`tracemem()` shows two copies because the `x` list was modified directly (instead of copied then subsequently modified as done earlier in the section). This means that both copies share memory addresses for the first two elements but differ for the third.]{.answer}

3. Sketch out the relationship between the following objects:

```{r 02-copy-mod_q3}
a <- 1:10
b <- list(a, a)
c <- list(b, a, 1:10)
```

[`a` is bound to an object containing the integers between 1 and 10. `b` contains two references to the same memory address to which `a` refers. `c` contains one three references to the object to which `a` refers as well as a second, separate memory address for the _new_ object of the integers between 1 and 10.]{.answer}

```{r 02-copy-mod_a3}
lobstr::ref(a)
lobstr::ref(b)
lobstr::ref(c)
```

4. What happens when you run this code? Draw a picture.

```{r 02-copy-mod_q4}
x <- list(1:10)
x[[2]] <- x
```

[The first line creates a one-element list of the integers between 1 and 10 and binds that object to the name `x`. The second line copies the original list and adds a second element that is contains bindings to both the original list and the object actually containing the numbers.]{.answer}

```{r 02-copy-mod_a4}
lobstr::ref(x)
```

### 2.3.5 Character Vectors

R stores characters in a **global string pool** where each element of a character vector is a pointer to a unique string in the pool. We can check this with `lobstr::ref()`--just like we can check lists--but we have to set the `character` argument to `TRUE`.

```{r 02-copy-mod-note_char-mem-address}
# Make vector
my_char <- c("a", "a", "abc", "d")

# Check memory addresses
lobstr::ref(my_char, character = TRUE)
```

## 2.4 Object Size

You can see how much memory an object takes with `lobstr::obj_size()`.

```{r 02-size-note_check}
obj_size(letters)
```

Because lists contain references to values (rather than the values themselves), they are often _much_ smaller than you might think!

```{r 02-size-note_list}
# Bind some values to a name
x <- runif(n = 1e6)

# Make a list of duplicates of that object
y <- list(x, x, x)

# Check size of both and see they are basically the same
lobstr::obj_size(x); lobstr::obj_size(y)
```

Because of R's global string pool (see the 'character vectors' bit of the "Copy-on-Modify" section), characters also take up less space than you might expect.

Finally, R (>= `3.5.0`) also uses "ALTREP" which is short for **alternative representation**. This means that numeric ranges are stored as simply the first and last number. Memory storage-wise it means that no matter how wide of a range is bound to an object, they all take up the same amount of memory.

```{r 02-size-note_altrep}
lobstr::obj_size(1:3)
lobstr::obj_size(1:1e9)
```

### 2.4.1 Exercises

1.In the following example, why are `object.size(y)` and `obj_size(y)` so radically different? Consult the documentation of `object.size()`.

```{r 02-size_q1}
y <- rep(list(runif(1e4)), 100)

object.size(y)
lobstr::obj_size(y)
```

[I think it's due to the difference between "SI units" and "IEC units".]{.answer}

2. Take the following list. Why is its size somewhat misleading?

```{r 02-size_q2}
funs <- list(mean, sd, var)
obj_size(funs)
```

[Because it contains references to functions that themselves refer to internal C code.]{.answer}

3. Predict the output of the following code:

```{r 02-size_q3}
#| eval: false
#| code-line-numbers: true

a <- runif(1e6)
obj_size(a)

b <- list(a, a)
obj_size(b)
obj_size(a, b)

b[[1]][[1]] <- 10
obj_size(b)
obj_size(a, b)

b[[2]][[1]] <- 10
obj_size(b)
obj_size(a, b)
```

[`a` and `b` (line 4 version) both contain bindings to the same underlying object so lines 2, 5, and 6 will return basically the same value. \n `b` (line 8 ver.) contains the original object as well as a modified version of the object. Therefore, lines 9 and 10 should return the same value but that value will be double that of lines 2, 5, and 6. \n `b` (line 12 ver.) contains two objects of equivalent size to `a` though neither _is_ `a`. So, line 13 will return the same value as lines 9 and 10 but line 14 will return that value + 50% (i.e., triple the size reported by lines 2, 5, and 6) ]{.answer}

## 2.5 Modify-in-Place

There are some exceptions to copy-on-modify, namely:

1. Objects with a single binding get a special performance optimization
2. Environments (which are a special type of object) are always modified in place

### 2.5.1 Single Binding Objects

Let's explore an example. We'll subtract the median from each column of a very large dataframe.

```{r 02-mod-place-note_demo-slow}
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))

cat(tracemem(x), "\n")

for (i in 1:5) {
  x[[i]] <- x[[i]] - medians[[i]]
}

untracemem(x)
```

If we convert the dataframe to a list we find that far fewer copies are produced and subsequently the loop is _much_ faster.

```{r 02-mod-place-note_demo-fast}
y <- as.list(x)

cat(tracemem(y), "\n")

for (i in 1:5) {
  y[[i]] <- y[[i]] - medians[[i]]
}

untracemem(x)
```

### 2.5.2 Environments

Environments are always modified in place. This is sometimes called "**reference semantics**" because when you modify an environment, all existing bindings to that environment continue to have the same reference.

Environments can also refer to themselves (which is a unique property of environments).

### 2.5.3 Exercises

1. Explain why the following code doesn't create a circular list.

```{r 02-mod-place-note_q1}
#| eval: false

x <- list()
x[[1]] <- x
```

[You don't get a circular list because the ability of an object or reference itself is unique to environment objects.]{.answer}

2. Wrap the two methods for subtracting medians into two functions, then use the `bench` package to carefully compare their speeds. How does performance change as the number of columns increase?

```{r 02-mod-place-note_a2-p1}
# Define first function
df_fxn <- function(obj, stat){
  
  # Duplicate object
  obj2 <- obj
  
  # Subract given stat from each 
  for (i in seq_along(stat)) {
    obj2[[i]] <- obj2[[i]] - stat[[i]]
  }

  # Return result
  return(as.list(obj2))
}

# Define second function
list_fxn <- function(obj, stat){
  
  # Make the object a list
  obj2 <- as.list(obj)
  
  # Subract given stat from each 
  for (i in seq_along(stat)) {
    obj2[[i]] <- obj2[[i]] - stat[[i]]
  }

  # Return result
  return(obj2)
}

# Create needed objects
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))

# Invoke both functions
timings <- bench::mark(
  df_fxn(obj = x, stat = medians),
  list_fxn(obj = x, stat = medians)
)

# Check results
summary(timings)
```

Check again with more columns to check for changing efficiency/scalability.

```{r 02-mod-place-note_a2-p2}
# Create needed objects
x <- data.frame(matrix(runif(5 * 1e4), ncol = 10))
medians <- vapply(x, median, numeric(1))

# Invoke both functions
timings2 <- bench::mark(
  df_fxn(obj = x, stat = medians),
  list_fxn(obj = x, stat = medians)
)

# Check results
summary(timings2)
```

[When you run the two functions on just five columns the performance of the dataframe function is worse (about 2x the median completion time). If you double the number of columns you get a near tripling of completion time for the dataframe-based function while the list-based one gets only marginally slower.]{.answer}

3. What happens if you attempt to use tracemem() on an environment?

[You get the following error: `'tracemem' is not useful for promise and environment objects`]{.answer}

## 2.6 Unbinding & Garbage Collector

When you use `rm()` you only remove the _names_ bound to the objects, not the objects themselves. This means that at the end of your code you might have many objects in your computer memory that have no names.

We can remove such objects with the **garbage collector** (a.k.a. "GC"). R uses a <u>tracing</u> GC which means that every object reachable from the global environment and the objects reachable from those objects (and so on). The GC does not use the modify-in-place reference count we covered above.

It is impossible to know when the GC will run itself (though it does happen automatically) and there is no need to run it manually (via `gc()`) unless you want to ask R to set aside memory for non-R programs and/or for the side-effect that it tells you how much memory is currently being used.

In that latter case, you could use `lobstr::mem_used()` to get the number of bytes currently being used. Though this number will differ from the amount of memory reported by your OS because (1) it includes objects created by R but not the R interpreter, (2) R might be 'holding on to' memory that the OS hasn't asked to be returned, and (3) R counts memory occupied by objects but there may be empty gaps due to deleted objects (phenomenon known as "memory fragmentation").
