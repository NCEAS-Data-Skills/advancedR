---
title: "Chapter 4: Subsetting -- Exercises"
author: "Nick J Lyon"
format: html
engine: knitr
code-overflow: wrap
---

```{r libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(purrr)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

## Selecting Multiple Elements

1. Fix each of the following common data frame subsetting errors:

```{r 04-multi-ex_q1}
#| eval: false
mtcars[mtcars$cyl = 4, ]
mtcars[-1:4, ]
mtcars[mtcars$cyl <= 5]
mtcars[mtcars$cyl == 4 | 6, ]
```

[See below]{.answer}

```{r 04-multi-ex_a1}
#| eval: false 

mtcars[mtcars$cyl == 4, ] # Missing second '='
mtcars[-1:-4, ] # Mixing positive and negative integers
mtcars[mtcars$cyl <= 5, ] # missing ',' to indicate we want rows that meet the condition
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ] # Second conditional was malformed / does not evaluate to 'T' or 'F'
```

2. Why does the following code yield five missing values? (Hint: why is it different from `x[NA_real_]`?)

```{r 04-multi-ex_q2}
#| eval: false

x <- 1:5
x[NA]
```

[The default atomic type of `NA` is logical so it similar to `x[TRUE]` in that each element is evaluated (and returned) separately]{.answer}

3. What does `upper.tri()` return? How does subsetting a matrix with it work? Do we need any additional subsetting rules to describe its behaviour?

```{r 04-multi-ex_q3}
#| eval: false

x <- outer(1:5, 1:5, FUN = "*")
x[upper.tri(x)]
```

[`upper.tri()` returns a matrix of logical values (`T`/`F`) where only the upper "triangle" (i.e., the top right chunk) of the matrix is `TRUE`. We do not need any additional rules to describe this behavior because we already know that matrices can be used to subset data.]{.answer}

4. Why does `mtcars[1:20]` return an error? How does it differ from the similar `mtcars[1:20, ]`?

[There are only 11 columns in `mtcars` (see `ncol(mtcars)`) so we cannot subset columns that don't exist. `mtcars[1:20, ]` works because that is actually for the first twenty _rows_ of the data (and all of the columns) because of the placement of the comma]{.answer}

5. Implement your own function that extracts the diagonal entries from a matrix (it should behave like `diag(x)` where `x` is a matrix).

[I have already done this in my `supportR` R package. See `?supportR::crop_tri` for the help file or `supportR::crop_tri` for the source code]{.answer}

6. What does `df[is.na(df)] <- 0` do? How does it work?

[The above code finds `NA`s in all columns of `df` and replaces them with zeros. It does this because `is.na(df)` returns a matrix of logical values where only the `NA` cells are `TRUE` and all others are `FALSE`. Assigning `0` then replaces only the `TRUE` cells (i.e., the `NA` cells). Intereestingly, `df[is.na(df)]` returns a vector whose length is equal to the number of `NA`s _in all columns of the data object_.]{.answer}

```{r 04-multi-ex_a6}
df <- data.frame(a = c(1, NA_real_, 2),
                 b = c(NA_character_, "y", "z"))
df

df[is.na(df)] <- 0
df
```

## Selecting a Single Element

1. Brainstorm as many ways as possible to extract the third value from the cyl variable in the mtcars dataset.

[See below]{.answer}

```{r 04-single-ex_a1}
mtcars$cyl[3]
mtcars[["cyl"]][3]
mtcars[3, 2]
purrr::pluck(.x = mtcars, "cyl", 3)
purrr::pluck(.x = mtcars, 2, 3)
purrr::chuck(.x = mtcars, "cyl", 3)
purrr::chuck(.x = mtcars, 2, 3)
mtcars[c(-1:-2, -4:-32), c(-1, -3:-11)] # >:)
```

2. Given a linear model, (e.g., `mod <- lm(mpg ~ wt, data = mtcars)`), extract the residual degrees of freedom. Then extract the R squared from the model summary (`summary(mod)`)

[See below]{.answer}

```{r 04-single-ex_a2}
mod <- lm(mpg ~ wt, data = mtcars)

mod$df.residual
mod[["df.residual"]]

summary(mod)$r.squared
summary(mod)[["r.squared"]]
```

## Applications



