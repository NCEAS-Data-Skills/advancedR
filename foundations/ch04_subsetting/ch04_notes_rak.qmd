---
title: "Ch 4 Notes and Exercises"
format: 
  html:
    toc: TRUE
    theme: yeti
---

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #475286FF;
  font-weight: bolder;
}

.question {
  color: #4C9AC4FF;
  font-style: italic;
}

.todo {
  color: #B53737FF;
  font-weight: bolder;
}
```


## 4.2 Selecting multiple elements

### Notes
- using `[` you can use positive integers, negative integers, logical vectors, nothing (returns original vector), 
zero (returns zero length vector), characters (for named vectors)

    - when subsetting with `[` names are matched exactly

- avoid subsetting with factors because it uses the underlying integer vector, not the character levels, which is not usually what one expects. 

- using `[` with a list always returns a list

- for matrices and arrays, you can subset with multiple vectors, a single vector, or a matrix

    - blank subsetting is useful here because it allows you to keep all rows or columns
    
    - I use this a lot but didn't know it
    
    - default is to simplify to lowest possible dimensionality (not always wanted)
    
- you can use an integer matrix to subset higher-dimensional matrices or arrays

    - each row in the matrix specifies the location of one value, and each column corresponds to a dimension in the array

- data frames have characteristics of lists and matrices:

    - `df[1:2]` selects first two columns (list behavior)
    
    - `df[1:3, ]` selects first three rows and all columns (matrix behavior)

- matrix subsetting simplifies by default, list subsetting does not

- subsetting a tibble with `[` always returns a tibble

- the default `drop = TRUE` behavior in subsetting is a common bug in functions

    - when writing functions, use `drop = FALSE` or tibbles (which uses that default)

### Exercises

1. Fix each of the following common data frame subsetting errors:

```{r}
# mtcars[mtcars$cyl = 4, ]
mtcars[mtcars$cyl == 4, ]

# mtcars[-1:4, ]
mtcars[-c(1:4), ]

#mtcars[mtcars$cyl <= 5]
mtcars$cyl[mtcars$cyl <= 5]

# mtcars[mtcars$cyl == 4 | 6, ]
mtcars[mtcars$cyl == 4 | mtcars$cyl == 6, ]

```

2. Why does the following code yield five missing values? (Hint: why is it different from `x[NA_real_]`?)

```{r}
x <- 1:5
x[NA]
#> [1] NA NA NA NA NA

x[NA_real_]

```

[Recycling rules mean that the `NA` subset is recycled for each element of the vector, and subsetting with `NA` always returns `NA`]{.answer}

3. What does `upper.tri()` return? How does subsetting a matrix with it work? Do we need any additional subsetting rules to describe its behaviour?

[It returns a matrix with logical values the same size as the input matrix with `TRUE` values in the upper triangle. It simplifies the output if you subset a matrix with the `upper.tri` matrix.]

```{r}
m2 <- matrix(1:20, 4, 5)

m2[upper.tri(m2), drop = FALSE]

```

4. Why does `mtcars[1:20]` return an error? How does it differ from the similar `mtcars[1:20, ]`?

[the `mtcars` data frame only has 11 columns, so you can't select column values greater than 11. The other subsetting feature selects rows 1:20 and all columns.]{.answer}

5. Implement your own function that extracts the diagonal entries from a matrix (it should behave like `diag(x)` where `x` is a matrix).

- you can subset a matrix with a matrix, and use the rows to specify location and column do specify dimension

- create a matrix with the first column id'ing the row to subset, and the second column id'ing the location of the value (dimension).

```{r}
my_diag <- function(x) {
  
  # get dims
  d <- dim(x)
  
  if(d[1] <= d[2]) {
    m <- matrix(data = c(1:d[1], 1:d[1]), ncol = 2)
  } else {
    m <- matrix(data = c(1:d[2], 1:d[2]), ncol = 2)
  }
  
  # subset
  x_sub <- x[m]
  
  # return subset m
  return(x_sub)
}

my_diag(m2)

m2 <- matrix(1:20, 5, 4)

my_diag(m2)

```

6. What does `df[is.na(df)] <- 0` do? How does it work?

[It checks all elements of the data frame for `NA` values and returns a logical vector. Then it subset s the dataframe where `is.na()` returns true and sets those `NA` valeus to 0.]{.answer}

## 4.3 Selecting a single element

### Notes

- `x$y` is shorthand for `x[["y"]]`

- `[[` important for lists

- when extracting single elements use `[[` for both lists and atomic vectors to reinforce that you are extracting a single value

- the `$` can't be used when you store a name of a column as a variable 

    - use `df[[var]]` not df$var
    
- `$` does left-to-right partial matching, and the `[[` does not

    - set options to warn of this: `options(warnPartialMatchDollar = TRUE)`

- when subsetting with "invalid" indices, different things can happen (errors vs. NULL) 

- `purrr::pluck()` and `purrr::chuck()` help to deal with this behavior

    - `purrr::pluck()` will always return `NULL` when an element is missing
    
    - `purrr::chuck()` will always thrown an error

- subsetting with **S4** objects

    - `@` (equivalent to `$`) and `slot()` (equivalent to `[[`)
    
    - `@` returns an error if the slot does not exist. 

### Exercises

1. Brainstorm as many ways as possible to extract the third value from the cyl variable in the mtcars dataset.

```{r}
mtcars$cyl[3]
mtcars[["cyl"]][3]
mtcars[3, "cyl"]
purrr::pluck(mtcars, "cyl")[3]
purrr::pluck(mtcars, "cyl", 3)
mtcars[3, 2]
```

2. Given a linear model, e.g., `mod <- lm(mpg ~ wt, data = mtcars)`, extract the residual degrees of freedom. Then extract the R squared from the model summary `(summary(mod))`

```{r}
mod <- lm(mpg ~ wt, data = mtcars)
str(mod)

mod$df.residual

mod_sum <- summary(mod)
str(mod_sum)

mod_sum$r.squared

```

## 4.4 Subsetting and assignment

### Notes

- you can combine all subsetting operators with assignment to modify the selected values

    -  `x[i] <- value`
    
    - check to make sure that `x[i]` is the same length as value and that [i] is unique

- remove components of a list with `x[[i]] <- NULL`

- subsetting with nothing can be useful to preserve the original structure of the object 

    - e.g. use `mtcars[] <- lapply(mtcars, as.integer)` rather than `mtcars <- lapply(mtcars, as.integer)`

## 4.5 Applications

### Notes

- create lookup tables (though the `join` functions seem more useful than this?)

    - [can anyone think of a reason to use a lookup table over one of the joins?]{.question}
    
- random samples and boostraps

- ordering (integer subsetting) - use to order the rows or columns of an object, though you can also do this with `sort()` or `arrange()`

- expanding aggregated counts

- remove columns from a data frame

- selecting rows based on a condition

- Boolean algebra versus sets 

    - set operations (integer subsetting) vs. Boolean algebra (logical subsetting)
    
    - use set operations when you want to find the first (or last) TRUE or have few TRUEs and many FALSEs
    
- `which()` allows you to convert a boolean to a an integer representation; but avoid this unless you want for example the first or last TRUE value 

### Exercises

1. How would you randomly permute the columns of a data frame? (This is an important technique in random forests.) Can you simultaneously permute the rows and columns in one step?

```{r}

# perumte columns
mtcars[, sample(length(mtcars), length(mtcars))]

# permute rows
mtcars[sample(nrow(mtcars), nrow(mtcars)), ]

# combine?
mtcars[sample(nrow(mtcars), nrow(mtcars)), sample(length(mtcars), length(mtcars))]

```
[It looks like you can do both at the same time.]{.answer}

2. How would you select a random sample of m rows from a data frame? What if the sample had to be contiguous (i.e., with an initial row, a final row, and every row in between)?

```{r}
m <- 10
mtcars[sample(nrow(mtcars), m), ]

start <- sample(nrow(mtcars), 1)
end <- start + m - 1

mtcars[c(start:end), ]

```

3. How could you put the columns in a data frame in alphabetical order?

```{r}

mtcars[, order(names(mtcars))]

```

## Key Definitions, Concepts, and Functions

### Key Concepts

:::{.concept}
**Subsetting with Factors**

Avoid subsetting with factors because it uses the underlying integer vector, not the character levels, which is not usually what one expects. 
:::


:::{.concept}
**Tibbles and subsetting**

Using tibbles with subsetting can avoid simplifying when it is not wanted that could cause issues with functions or code if a data frame (or tibble) is expected input.
:::

### Key Functions

:::{.function}
**`options(warnPartialMatchDollar = TRUE)`**

Warns for subsetting with partial matching when using the `$` to subset.
:::

:::{.function}
**`purrr::pluck()`**

Subsets an object and always returns `NULL` if that object is missing  
:::

:::{.function}
**`purrr::chuck()`**

Subsets an object and always returns an error if that object is missing  
:::