
```{r 07-libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(rlang)
```

### 7.2 Environment Basics

Environments are similar to named lists **_except_** in the following 4 ways:

1. Names in an environment _must_ be unique
2. Names in an environment are not ordered
3. An environment has a parent
4. Environments are not copied when modified

#### 7.2.1 Basics

Can create an environment with `rlang::env()` (similar internal structure to `list()` and/or creating a named vector). The job of an environment is to **bind** values to their user-defined names.

`env_print()` identifies some key information about the contents of the specified environment. `env_names()` returns a character vector of current bindings. 

#### 7.2.2 Important Environments

Current and global environments can be identified via `rlang::current_env()` and `rlang::global_env()` respectively.

#### 7.2.3 Parents

Environments have a parent which is another environment. <u>Parents define the order in which R looks for objects if it doesn't find it in the current environment</u> (i.e., if the function environment lacks a needed object, R will look in _that environment's parent_ for the object--and so on). Parents can be accessed via `rlang::env_parent()`.

Only one environment _doesn't have_ a parent: the empty environment. The ancestors of every environment eventually terminate in the empty environment.

#### 7.2.4 Super Assignment (`<<-`)

Super assignment (`<<-`) creates/modifies an object in the _parent_ of the environment in which it is invoked! Useful in the context of function factories (more on this in chapter 10).

#### 7.2.5 Getting & Setting

Elements of an environment can be retrieved and set via `$` and `[[` (similar to lists), _except_ that `[[` does not accept numeric indices. `[` doesn't work at all on environments.

You can use `env_get()` if you want an error when the specified object does not exist in the specified environment. You can use `env_poke()` and `env_bind()` to add one or more bindings (respectively) to an environment.

To remove an element you need to use `env_unbind()` (setting it to `NULL` doesn't work because named `NULL`s are often useful).

See `get()`, `assign()`, `exists()`, and `rm()` for more information on various getting/setting operations.

#### 7.2.6 Advanced Bindings

Two exotic variants of `env_bind()` exist: (1) `env_bind_lazy()` makes "delayed bindings" that are only evaluated when they are first accessed and (2) `env_bind_active()` makes "active bindings" that are recomputed every time they are accessed.

Delayed bindings are useful for R packages to behave as if they have data loaded but in reality only load it when necessary. Active bindings are useful for R6 fields (more on this in chapter 14).

#### 7.2.7 Exercises

1. List three ways in which an environment differs from a list.

[Environments are unordered, all names in them must be unique, and all (but one) environment has a parent]{.answer}

2. Create an environment as illustrated by this picture (see online [here](https://adv-r.hadley.nz/environments.html#exercises-20)).

[See below.]{.answer}

```{r 07-basics_a2}
# Make environment
e1 <- env()

# Create object in that environment pointing at that environment
rlang::env_poke(env = e1, nm = "loop", value = e1)

# Demonstrate that worked
rlang::env_print(env = e1)
```

3. Create a pair of environments as illustrated by this picture (see online [here](https://adv-r.hadley.nz/environments.html#exercises-20)).

[See below.]{.answer}

```{r 07-basics_a3}
# Make environments
e1 <- env()
e2 <- env()

# Create an object in each that points at the other
rlang::env_poke(env = e2, nm = "dedoop", value = e1)
rlang::env_poke(env = e1, nm = "loop", value = e2)

# Demonstrate that worked
rlang::env_print(env = e1)
rlang::env_print(env = e2)
```

4. Explain why `e[[1]]` and `e[c("a", "b")]` don't make sense when `e` is an environment.

[The `[[` method doesn't work because lists are _not ordered_ which means there is no "first" element to access in that way. The second method doesn't work because `[` doesn't work for environments (see 7.2.5) for I think the same reason]{.answer}

5. Create a version of `env_poke()` that will only bind new names, never re-bind old names. Some programming languages only do this and are known as "single assignment languages".

[See below.]{.answer}

```{r 07-basics_a5}
# Define function
custom_poke <- function(env, nm, value){
  
  # Only bind if the name isn't in use already
  if(!nm %in% rlang::env_names(env = env)){
    
    rlang::env_poke(env = env, nm = nm, value = value)
    
  } else {
    message("Name already exists in specified environment so no new binding made")
  }
}

# Demonstrate it works
## No existing object
custom_poke(env = rlang::global_env(), nm = "new_obj", value = 3)
new_obj

## Existing object
x <- 0
custom_poke(env = rlang::global_env(), nm = "x", value = 2)
x
```

6. What does this function do? How does it differ from `<<-` and why might you prefer it?

[This function returns an error if there is no object to _rebind_ to specified name. This is preferable as--I think--`<<-` silently skips objects that already exist. So having an informative error might be useful if this was a lower-order building block for some larger effort]{.answer}

```{r 07-basics_q6}
#| eval: false

rebind <- function(name, value, env = caller_env()) {
  if (identical(env, empty_env())) {
    stop("Can't find `", name, "`", call. = FALSE)
  } else if (env_has(env, name)) {
    env_poke(env, name, value)
  } else {
    rebind(name, value, env_parent(env))
  }
}
rebind("a", 10)
#> Error: Can't find `a`
a <- 5
rebind("a", 10)
a
#> [1] 10
```

### 7.3 Recursing Over Environments

Recursive operations are needed to find/operate on all ancestors of a particular environment. Wickham defines the `where` function (see below) that identifies the environment that houses a particular object (following R's regular scoping rules). Returns an error if the function reaches the empty environment without finding the object.

```{r 07-recursive_where}
where <- function(name, env = caller_env()) {
  if (identical(env, empty_env())) {
    # Base case
    stop("Can't find ", name, call. = FALSE)
  } else if (env_has(env, name)) {
    # Success case
    env
  } else {
    # Recursive case
    where(name, env_parent(env))
  }
}
```

Here are some examples of how this can be used (excluding the one that throws an error to be able to render this document).

```{r 07-recursive_where-ex}
# where("yyy")
##> Error: Can't find yyy

x <- 5
where("x")

where("mean")
```

#### 7.3.1 Exercises

1. Modify `where()` to return _all_ environments that contain a binding for `name`. Carefully think through what type of object the function should return.

[Skipping this question because I honestly cannot think of a use-case. I think a list would be the better type to return so it could include the environment ID and have easy space for other information if needed]{.answer}

2. Write a function called `fget()` that finds only function objects. It should have two arguments, `name` and `env`, and should obey the regular scoping rules for functions: if there’s an object with a matching name that’s not a function, look in the parent. For an added challenge, also add an `inherits` argument which controls whether the function recurses up the parents or only looks in one environment.

[Again, skipping this one because it doesn't feel like it has broad utility]{.answer}

### 7.4 Special Environments

Special environments are typically created by R instead of by the user. 

#### 7.4.1 Package Environments and the Search Path

Packages attached via `library()` or `require()` become parents of the global environment. The immediate parent of the global environment is the _most recent_ package to be loaded followed by the next most recent (and so on).

The order in which packages are attached is known as the "search path". `base::search()` and `rlang::search_env()` return the names of these environments and the environments themselves respectively.

#### 7.4.2 Function Environment

The "function environment" is the current environment at the time the function was created. Functions that capture their environments like this are called "closures" which is why that term is used interchangeably with "function" in R's documentation.

The distinction between the function environment and then environment in which the function itself is bound is the difference between how the function finds its variables versus how we can find the function.

#### 7.4.3 Namespaces

From 7.4.1 we saw that the order of package environments in the search path _depends on the order in which they are loaded_. This could make searching for a function in a particular package more difficult because a function of the same name in a package loaded _later_ (counter-intuitively) would be found and used first.

"Namespaces" prevent this from happening by letting the user specify the package environment in which the function should be found. Note that the package environment is _external to_ the package (its how users find packages/functions) while the namespcae environemnt is _internal to_ the package (and guarantees that functions invoked by a function look first inside their own package).

Internal objects are those that are installed with a given package but are found only in the namespace environment (effectively hiding them from the user while leaving them available to other tools in the package).

Namespace environments have the following ancestors: 

- "**Imports**" environment: contains bindings to all functions used by the package (controlled by `NAMESPACE` file created by package maintainer)
- **base namespace** environment: parent of imports environment; contains same bindings as base environment but with a different parent
- **global** environment: parent of the base namespace environment; means that if a binding isn't found in the imports environment R's usual object searching rules apply. This is a bad call and `R CMD check` will warn package developers about code lie this

There is no direct link between package and namespace environments; instead each is linked to the function environment.

#### 7.4.4 Execution Environments

Each time a function is run, a new environment is created to host those internal operations; this is called the "execution" environment. Such environments "go away" after the function finishes (i.e., they are garbage collected).

#### 7.4.5 Exercises

1. How is `rlang::search_envs()` different from `rlang::env_parents(rlang::global_env())`?

[The first includes the global environment (as the first item) while the second does not return the global environment but does include the empty environment]{.answer}

2. Draw a diagram that shows the enclosing environments of this function:

```{r 07-special-env_q2}
#| eval: false

f1 <- function(x1) {
  f2 <- function(x2) {
    f3 <- function(x3) {
      x1 + x2 + x3
    }
    f3(3)
  }
  f2(2)
}
f1(1)
```

3. Write an enhanced version of `str()` that provides more information about functions. Show where the function was found and what environment it was defined in.

### 7.5 Call Stacks



### 7.6 Environments as Data Structures






