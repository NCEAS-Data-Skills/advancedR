
```{r 08-libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(rlang)
```

### 8.1 Introduction

"Conditions" are paired sets of tools that allow function authors to indicate when something unusual is happening. Function authors **signal** conditions with functions like `stop()`, `warning()`, or `message()`. Function users can then handle them with `tryCatch()` or `withCallingHandlers()`.

### 8.2 Signaling Conditions

| **Condition** | **Severity** | **Description** | Function |
|:---:|:---:|:-----------------------------|:---:|
| Error | Most | Indicate that the function _cannot_ continue and execution must stop | `stop()` |
| Warning | Intermediate | Indicate something has gone wrong but the function could at least partially recover | `warning()` |
| Message | Least | Indicate that an action has been taken on the user's behalf but not necessarily a problem | `message()` |
| Interrupt | -- | <u>Only occurs in interactive contexts</u>. Indicates the user has manually escaped an execution | -- |

#### 8.2.1 Errors

By default, errors include the function call where the error occurred. Can be silenced with the `call. = F` argument in `stop()` or by using `rlang::abort()` instead of `stop()` which has this behavior set as the default. Wickham says it is good practice to do this but I think it can be helpful when debugging heavily nested functions to know whether the function the user thinks they called is the one with the error or instead is some deeper/internal function.

Tidyverse style guide has nice [tips on writing informative error messages](https://style.tidyverse.org/error-messages.html).

#### 8.2.2 Warnings

You can have multiple errors on the same function call (while you'd only get the _first_ error). Warnings are sort of nebulous because it can be hard to decide between using one versus using an error/message instead. Wickham suggests the obvious contexts for warnings are when you deprecate a function or when you're reasonably certain you can recover from a problem.

#### 8.2.3 Messages

Messages are used for information purpsoes only. Common cases include:

- When default argument requires substantive computation and you want to tell the user what was done
- When a function is called for side effects but would otherwise be silent
- When a process takes a while and you want to re-assure the user that the function is still working (or you can use a progress bar with `progress`--see [here](https://r-lib.github.io/progress/))
- When a package is first loaded

Generally nice to give a `quiet` argument to the user so there's an easy way of silencing messages if desired.

#### 8.2.4 Exercises

1. Write a wrapper around `file.remove()` that throws an error if the file to be deleted does not exist.

[See below]{.answer}

```{r 08-signal_a1}
file.rm2 <- function(file){
  
  if(file.exists(file) != TRUE)
    stop("Can't find `file`")
  
  file.remove(file)
  
}
```

2. What does the `appendLF` argument to `message()` do? How is it related to `cat()`?

[That argument determines whether a new line should be added to the end of messages returned as character strings. `cat()` only behaves this way if the `fill` argument is `TRUE` or numeric]{.answer}

### 8.3 Ignoring Conditions

Simplest way of handling conditions in R is to ignore them. `try()` ignores errors, `suppressWarnings()` ignores warnings, and `suppressMessages()` ignores messages.

`try()` continues execution of the function after encountering an error though `tryCatch()` is more recommended for debugging purposes.

### 8.4 Handling Conditions

"Condition handlers" let us temporarily override default behaviors of errors/warnings/messages; these include `tryCatch()` and `withCallingHandlers()`. See the below code chunk for an example of their syntax.

```{r 08-handle-syntax}
#| eval: false

tryCatch(
  error = function(cnd) {
    # code to run when error is thrown
  },
  code_to_run_while_handlers_are_active
)

withCallingHandlers(
  warning = function(cnd) {
    # code to run when warning is signalled
  },
  message = function(cnd) {
    # code to run when message is signalled
  },
  code_to_run_while_handlers_are_active
)
```

#### 8.4.1 Condition Objects

When conditions are signaled, they make a 'secret' condition object. Built-in conditions (see 8.5 for custom conditions) are lists with two elements:

1. `message` -- length 1 character vector containing text to display to user. Extractable via `conditionMessage()`
2. `call` -- call which triggered the condition. If the signaler does not include the call (see 8.2), then it will be `NULL`. Extractable via `conditionCall()`

#### 8.4.2 Exiting Handlers

`tryCatch()` creates exiting handlers (typically as a result of error conditions). They are so named because once one is triggered, control is passed to the handler and never returns to the original function code (effectively until the "exit" of the code). 

You can also specify a `finally` argument (within `tryCatch()`) that specifies a non-function block of code to run regardles of whether the original expression succeeds. See below for a syntax example.

```{r 08-handle-exit-syntax}
#| eval: false

path <- tempfile()
tryCatch(
  {
    writeLines("Hi!", path)
    # ...
  },
  finally = {
    # always run
    unlink(path)
  }
)
```

#### 8.4.3 Calling Handlers

`withCallingHandlers()` sets up "calling handlers" where code execution continues normally once the handler returns (as opposed to exit handlers where execution does not return).

_Calling handlers are only useful for their side effects_ because there is nowhere for a hypothetical returned value to be stored.

#### 8.4.4 Call Stacks

See the book for details here (felt very edge case and not sure how I'd summarize it).

#### 8.4.5 Exercises

1. What extra information does the condition generated by `rlang::abort()` contain compared to the condition generated by `stop()` i.e. what's the difference between these two objects? Read the help for `?rlang::abort()` to learn more.

[`stop()` by default includes the call where the error originates while `rlang::abort()` does not (by default). `rlang::abort()` does include a "simplified" backtrace of the last error while `stop()` does not include that information]{.answer}

2. Predict the results of evaluating the following code.

```{r 08-handle_q2}
#| eval: false

show_condition <- function(code) {
  tryCatch(
    error = function(cnd) "error",
    warning = function(cnd) "warning",
    message = function(cnd) "message",
    {
      code
      NULL
    }
  )
}

show_condition(stop("!"))
show_condition(10)
show_condition(warning("?!"))
show_condition({
  10
  message("?")
  warning("?!")
})
```

[The first example will throw an error, the second will return `NULL` (`tryCatch()` is only for errors), the third will return a warning (because the warning provided to the function will be evaluated). I had to check the solutions for the fourth but apprently it will return "message" because `tryCatch()` terminates the evaluation of the code _as soon as_ it is called]{.answer}

3. Explain the results of running this code:

```{r 08-handle_q3}
#| eval: false

withCallingHandlers(
  message = function(cnd) message("b"),
  withCallingHandlers(
    message = function(cnd) message("a"),
    message("c")
  )
)
#> b
#> a
#> b
#> c
```

[The answer is explained in the solutions manual but (A) it is really complex and (B) it doesn't seem terribly useful to understand for day-to-day function writing.]{.answer}

4. Read the source code for `rlang::catch_cnd()` and explain how it works.

[See the source code below. It seems like `rlang::catch_cnd()` is essentially a wrapper for `tryCatch()` with some guard rails in place for malformed entries to its own arguments. It explicitly returns `NULL` which seems like could be a useful property]{.answer}

```{r 08-handle_a4}
#| eval: false

function (expr, classes = "condition") 
{
    stopifnot(is_character(classes))
    handlers <- rep_named(classes, list(identity))
    eval_bare(rlang::expr(tryCatch(!!!handlers, {
        force(expr)
        return(NULL)
    })))
}
## <bytecode: 0x14030eae0>
## <environment: namespace:rlang>
```

5. How would you rewrite `show_condition()` to use a single handler?

[See below]{.answer}

```{r 08-handle_a5}
#| eval: false

show_condition_v2 <- function(code) {
  tryCatch(
    condition = function(cnd){
      if(inherits(x = cnd, what = "error")) return("error")
      if(inherits(x = cnd, what = "warning")) return("warning")
      if(inherits(x = cnd, what = "message")) return("message") },
    { code
      NULL }
  ) # end `tryCatch` parentheses
} # end `show_condition_v2` parentheses
```

### 8.5 Custom Conditions

Built in conditions only contain a `message` and a `call`. So, if you want to catch a particular type of error you are restricted to only being able to use the text of the error message (which is often unhelpful--particularly for custom functions of dubious provenance).

Typical syntax is as follows (and is built with `rlang::abort()`):

```{r 08-custom-syntax}
#| eval: false

rlang::abort(
  "error_not_found",
  message = "Path `blah.csv` not found", 
  path = "blah.csv"
)
#> Error: Path `blah.csv` not found
```

#### 8.5.1 Motivation

`base::log()` is not very specific. If there are multiple arguments, the error returned for an inappropriate class suppled to just one of them is ambiguous about _which_ argument caused the error. We can write a custom function that is more precise about which argument is problematic (or other information useful in debugging the function).

However, manually assembling error information into a single string is still not ideal for handling errors programmatically.

#### 8.5.2 Signaling

You can build your custom condition that includes all the metadata that you could possibly need to debug a given error. When combining `rlang::abort()` and `glue::glue()` you can also make a really smooth interior to your custom condition function.

#### 8.5.3 Handling

Once your custom conditions have a clear and consistent internal structure they are easier to program with. The `testthat` library is underpinned--essentially--by custom conditions and their handlers (which is why that library is so useful for unit test writing in function/package development).

#### 8.5.4 Exercises

1. Inside a package, it's occasionally useful to check that a package is installed before using it. Write a function that checks if a package is installed (with `requireNamespace("pkg", quietly = FALSE)`) and if not, throws a custom condition that includes the package name in the metadata.

[See below]{.answer}


```{r 08-custom_a1}
#| eval: false

package_check <- function(pkg){
  
  # Error catching
  if(requireNamespace(package = pkg, quietly = TRUE) != TRUE){
    rlang::abort(
      "pkg_not_found", 
      message = glue::glue("package '{pkg}' not installed"),
      package = pkg)
  }
  # What to do if no error is found
  TRUE 
}

package_check(pkg = "ggplot2")
## [1] TRUE

package_check(pkg = "ggplot77")
## Error in `package_check()`:
## ! package 'ggplot77' not installed
## Backtrace:
##  1. global package_check(pkg = "ggplot77")
```

2. Inside a package you often need to stop with an error when something is not right. Other packages that depend on your package might be tempted to check these errors in their unit tests. How could you help these packages to avoid relying on the error message which is part of the user interface rather than the API and might change without notice?

[You could write your own custom conditions with some sort of standardized structure and then avoid changing that interior components so that the 'downstream' package authors could build their unit tests to rely on firmer metadata than the simple text of the error message. Seems like you would need to do this from the outset and/or release a major version update when you implemented this as making such a change after releasing your package would absolutely be a breaking change for anyone relying on the simple error text method]{.answer}

### 8.6 Applications





