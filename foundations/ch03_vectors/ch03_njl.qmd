
```{r 03-libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(lobstr, bench)
```

### 3.2 Atomic Vectors

Four primary types of atomic vectors: (1) character, (2) logical, (3) integer, (4) double. Collectively integer and double vectors are known as "numeric" vectors. Atomic vectors can instead be "complex" or "raw" but these are rare and undiscussed in this book due to that rarity.

#### 3.2.1 Scalars

Each of the four primary atomic vector types has a unique syntax for creating an individual value called a **scalar**.

- Logicals can be written in full or abbreviated to the first letter (e.g., `TRUE`, `F`, etc.) so long as they are entirely capitalized
- Double vectors support decimals, hexadecimals, and scientific notation. Uniquely to this vector type they also support `Inf`, `-Inf`, and `NaN` ("Not a Number")
- Integers are similar to doubles but numbers cannot be fractions and must end with `L`
- Character strings must be surrounded by double quotes or single quotes (i.e., apostrophes)
    - Special characters can be escaped with a back slash (`\`)
    - See `?Quotes` for more info

#### 3.2.2 `c()`

Smaller vectors can be combined into larger ones with `c()`. This function also "flattens" inputs so it always returns an atomic vector (so long as its inputs are atomic vectors).

The number of elements in a vector can be assessed with `length()` and the class attribute can be checked with `class()` or `typeof()`

#### 3.2.3 Missing Values

There is a special sentinel value in R: `NA` ("not applicable"). These are infectious in that most operations involving an `NA` return `NA`. The exception to this is when the non-`NA` value contains all of the information needed to deduce the result (e.g., `NA | T` returns `T`).

`is.na()` can be used to identify which elements of a vector are `NA`.

Note that technically each atomic vector type has its own corresponding `NA` type (`NA`, `NA_real_`, `NA_integer_`, `NA_character_`) but this is largely irrelevant to practical coding because `NA` is coerced to the needed type as/if needed.

#### 3.2.4 Testing & Coercion

You can test the type of a given vector using the corresponding `is.*()` function. However, remember that `is.integer()` will return `FALSE` for a double vector containing only non-fractions (because numbers need a `L` appended to count as truly integers).

For atomic vectors, type is a property of the entire vector so when atomic vectors of different types are combined--using `c()`--the resulting atomic vector will inherit one of the parent vectors' types. The priority of types is fixed and is as follows (from most general to most specific): character -> double -> integer -> logical.

You can force coercion with the corresponding `as.*()` function. Failed coercion of individual elements of a vector results in a warning message and an `NA` in that position.

#### 3.2.5 Exercises

1. How do you create raw and complex scalars? (See `?raw` and `?complex`.)

[Raw vectors are those that contain raw bytes. They can be created with `raw()` or `as.raw()`]{.answer}

[Complex vectors are those that contain 'complex' numbers (e.g., imaginary, etc.). They can be created with `complex()` or `as.complex()`]{.answer}

2. Test your knowledge of the vector coercion rules by predicting the output of the following uses of `c()`:

```{r 03-atomic_q1}
#| eval: false
#| code-line-numbers: true

c(1, FALSE)
c("a", 1)
c(TRUE, 1L)
```

[Line 1 should return the same as `c(1, 0)` (type double)]{.answer}
[Line 2 should return the same as `c("a", "1")` (type character)]{.answer}
[Line 3 should return the same as `c(1L, 1L)` (type integer)]{.answer}

3. Why is `1 == "1"` true? Why is `-1 < FALSE` true? Why is `"one" < 2` false?

[A: Returns `TRUE` because after coercing the type of the double `1` to a character `"1"`, both sides of the conditional operator are equal to one another.]{.answer}
[B: Returns `TRUE` because coercing `FALSE` to a double (`0`), -1 is less than 0.]{.answer}
[C: Returns `FALSE` because numeric characters sort before letter characters and the less/greater than conditional is asking for that order rather than number size. I.e., "o" is not alphanumerically 'before' "2".]{.answer}

4. Why is the default missing value, `NA`, a logical vector? What's special about logical vectors? (Hint: think about `c(FALSE, NA_character_)`.)

[`NA` is a logical vector because logical atomic vectors are the most specific atomic vector (i.e., when two atomic vectors of different types are combined and one is logical, the elements of that vector are the ones that are coerced to match the type of the other vector.)]{.answer}

5. Precisely what do `is.atomic()`, `is.numeric()`, and `is.vector()` test for?

[`is.atomic()` tests for logical/integer/character/complex/raw vector types. It also tests for _numeric_ vectors but recall that "numeric" isn't necessarily the same thing as "double"--which is the real name of that atomic vector type]{.answer}

[`is.numeric()` tests for integer/double vectors that _also_ contain values that can be "regarded as" numeric (e.g., arithemtic makes sense, etc.)]{.answer}

[`is.vector()` tests for vectors that have no attributes other than names. Note this means that `is.vector()` would return `FALSE` for a "vector" of class "factor" because the levels are an attribute other than names]{.answer}

### 3.3 Attributes

Attributes are--essentially--metadata that can be attached directly to a given object. 

#### 3.3.1 Getting & Setting

Individual attributes can be (A) retrieved _and_ set with `attr()`, (B) retrieved _only_ en masse with `attributes()` or (C), set _only_ en masse with `structure()`.

**Attributes are (mostly) ephemeral** (i.e., they are lost by most operations). The two exceptions are (1) the "names" attributes and (2) the "dim" attribute.

#### 3.3.2 Names

You can create names (1) when you create the vector, (2) using `names()`, or (3) inline with `setNames()`. Names can be removed with `unname()` or by setting the names attribute to `NULL` (like so: `names(x) <- NULL`).

Useful names should be unique and not be missing but that is not enforced by R. If _all_ names are missing, `names()` returns `NULL`.

#### 3.3.3 Dimensions

Dimensions can be specified to make vectors behave like matrices or arrays. Many functions for working with vectors have generalizations for matrices/arrays. See below:

| Vector | Matrix | Array |
|:---:|:---:|:---:|
| `names()`	| `rownames()`, `colnames()` | `dimnames()` |
| `length()` | `nrow()`, `ncol()` | `dim()` |
| `c()` | `rbind()`, `cbind()` | `abind::abind()` |
| - | `t()` | `aperm()` |
| `is.null(dim())` | `is.matrix()` | `is.array()` |

#### 3.3.4 Exercises

1. How is `setNames()` implemented? How is `unname()` implemented? Read the source code.

[`setNames()` is implemented by using the `names()` function internally. `unname()` is implemented by running `names(obj) <- null` under the hood. `names()` itself relies on the primitive "names" function ]{.answer} 

2. What does `dim()` return when applied to a 1-dimensional vector? When might you use `NROW()` or `NCOL()`?

[`dim()` returns `NULL` when run on a 1D vector (or at least does on one without a manully defined dimenion attribute). `NROW()` and `NCOL()` treat vectors as 1-column matrices which I'm hard-pressed to find a use-case for (especially when `length()` would return the same as `NROW()` and `NCOL()` can often be safely assumed to be 1 for a vector]{.answer}

3. How would you describe the following three objects? What makes them different from 1:5?

```{r 03-attr_q3}
x1 <- array(1:5, c(1, 1, 5))
x2 <- array(1:5, c(1, 5, 1))
x3 <- array(1:5, c(5, 1, 1))
```

[`x1` is almost like a five-element list were each element contains one integer between 1 and 5. This is because it is the "z" dimension to which "5" was supplied. `x2` is almost like a one-row matrix because "5" was supplied to the "y" dimension. `x3` is like a one-column matrix because "5" was supplied to the "x" dimension.]{.answer}

4. An early draft used this code to illustrate `structure()`:

```{r 03-attr_q4}
structure(1:5, comment = "my attribute")
#> [1] 1 2 3 4 5
```

But when you print that object you donâ€™t see the comment attribute. Why? Is the attribute missing, or is there something else special about it? (Hint: try using help.)

[I think two facets prevent the comment attribute from being displayed. First, I think most attributes are not printed by default. Second, I think `structure()` is just for _setting_ attributes. If you want to retrieve/view attributs creates by `structure()` you need to use `attributes()` or `attr()`. As an afterthought, could be that we're not binding it to an object?]{.answer}

### 3.4 S3 Atomic Vectors

The "class" attribute is one of the most important and it underpins the S3 object system. Simply having a class attribute makes an object an S3 object. This chapter covers four in particular: **factors** (i.e., categorical data with ordered levels), **Date** (must have resolution to particular days), **POSIXct** (with second/sub-second resolution), and  durations (stored as **difftime** vectors).

#### 3.4.1 Factors

Factors are special integer vectors with a `class` attribute of "factor" and a `levels` attribute to define the set of allowable values. See an example below:

```{r 03-s3-vecs-notes_factors}
x <- factor(c("a", "b", "b", "a"))
x
typeof(x)
attributes(x)
```

Factors are useful when you know all possible values even when not all of them are necessarily in a given data object. This coupled with the fact that factor vectors are essentially a special type of integer means that you can quickly get counts of all levels--even those not found in the data.

Ordered factors (created by `ordered()`) are a sub-type of factors that--as one might expect--still have levels but their order is meaningful. This is automatically used by some statistics/visualization functions in R.

Factors are common in base R because a lot of the data import functions (e.g., `read.csv()`) automatically coerce character vectors to factors. This is potentially risky because they do not "know" the full set of levels that are _possible_, only those that are actually in the data. It is preferable to suppress this behavior with `stringsAsFactors = F` and then manually define factors _post hoc_.

#### 3.4.2 Dates

Dates are built on top of double vectors. They have only a class attribute. The value of the double is the **days** since January 1^st^, 1970.

#### 3.4.3 Date-Times

POSIX stands for <u>P</u>ortable <u>O</u>perating <u>S</u>ystem <u>I</u>nterface. The "ct" comes from "calendar time" and the "lt" comes from "local time".

Date-times are built on top of double vectors. They have a class attribute and a "tzone" attribute for the time zone. The value of the double is the **seconds** since January 1^st^, 1970.

#### 3.4.4 Durations

Difftimes are also built on top of doubles and their duration is the difference between two dates/date-times. They have a "units" attribute to define how that number should be interpreted.

#### 3.4.5 Exercises

1. What sort of object does `table()` return? What is its type? What attributes does it have? How does the dimensionality change as you tabulate more variables?

[`base::table()` creates a contingency table indicating all of the combinations of the provided factor levels. Note there is a different function of the same name (`vctrs::table()`) and it is unclear which function this question is asking about (assumed the base R one but could be wrong).]{.answer}

```{r 03-s3-vecs_a1}
x1 <- table(c(1:3))
x1
str(x1)

x2 <- table(c(1:3), c(1:3))
x2
str(x2)
```

2. What happens to a factor when you modify its levels?

```{r 03-s3-vecs_q2}
#| eval: false

f1 <- factor(letters)
levels(f1) <- rev(levels(f1))
```

[The vector is re-ordered so that the elements of the vector are in the same order as the levels.]{.answer}

3. What does this code do? How do `f2` and `f3` differ from `f1`?

```{r 03-s3-vecs_q3}
#| eval: false

f2 <- rev(factor(letters))

f3 <- factor(letters, levels = rev(letters))
```

[`f2` differs from `f1` because its _levels_ are in the reverse order of those of `f1`. The actual values in the factor are in the same order. This means that the atomic integer vector will be inverted between the two (because "1" is "a" for `f2` but "z" for `f1`).]{.answer}

[`f3` differs from `f1` because its _values_ are in the reverse order of those of `f1`. This means that the level-to-integer coercion would work in the same way for both vectors but the order of those elements in the vector would be opposite.]{.answer}

### 3.5 Lists

#### 3.5.1 Creating

You can create a list with `list()`. Recall (from chapter 2) that because list elements are actually _references_ to objects--as opposed to the objects themselves--the overall size of a given list is often smaller than you might expect (i.e., if a list has four elements and each is the same data object, the total size of the list will be only marginally more than a single copy of the original data object). Lists are sometimes called **recursive vectors** because lists can contain other lists. 

Lists can be combined with one another using `c()`. If `c()` is given a combination of lists and atomic vectors, it will coerce everything to lists before combining.

#### 3.5.2 Testing & Coercion

You can use `is.list()` and `as.list()` to get the type of a list ("list") and coerce an object to a list respectively.

#### 3.5.3 Matrices & Arrays

With vectors, the dimension attribute creates matrices/arrays. With lists, that attribute creates list-matrices and list-arrays.

#### 3.5.4 Exercises

1. List all the ways that a list differs from an atomic vector.

[A list can contain other lists. The elements of a list need not all be the same type/class nor do they all need to have the same number of dimensions.]{.answer}

2. Why do you need to use `unlist()` to convert a list to an atomic vector? Why doesnâ€™t `as.vector()` work?

[Because a list contains _references_ to other objects rather than values themselves (as is the case with some other object types)]{.answer}

3. Compare and contrast `c()` and `unlist()` when combining a date and date-time into a single vector.

[`unlist()` coerces both list elements into an atomic double vector. `c()` on the other hand coerces the POSIXct into a Date (i.e., drops the 'time' part of the value).]{.answer}

```{r 03-lists_a3}
x <- list(as.Date("2024-01-01"), as.POSIXct("2024-01-01 20:00", tz = "UTC"))
x

y <- unlist(x)
y
typeof(y)

z <- c(as.Date("2024-01-01"), as.POSIXct("2024-01-01 20:00", tz = "UTC"))
z
class(z)
```

### 3.6 Dataframes & Tibbles

A data frame is a named list of vectors with attributes for column and row names (`names` and `row.names` respectively) and S3 class "data.frame". Unlike other lists, <u>all vectors in a dataframe must be the same length</u>. Dataframes are an important part of what makes R distinct from other programming languages. They are however 20+ years old and are not exactly what people want/need now. Tibbles are the modern reimagining of dataframes.

#### 3.6.1 Creating

Can be made with `data.frame()` and `tibble()` respectively. Note that tibbles _do not_ automatically convert non-syntactic names nor do they coerce characters into factors (while dataframes do on both counts). Tibbles _do_ surround non-syntactic names with backticks though.

Dataframes and tibbles both recycle inputs that are too short. Importantly tibbles will only recycle vectors of length 1 while dataframes will recycle anything so long as the number of rows in the dataframe is a multiple of the vector to be recycled.

Finally, tibbles allow you to refer to objects created during construction.

#### 3.6.2 Row Names

Dataframes allow you to name each row with a character vector containing only unique values. These can be used to subset the data. However, they are a bad idea for three reasons:

1. Metadata is fundamentally data and should be stored as other data is (i.e., in a column)
2. Row names are limited because you need to be able to completely describe the row in a character string
3. Row names must be unique so duplicated rows require complex work-arounds to create non-duplicate row names

Tibbles do not support row names.

#### 3.6.3 Printing

Tibbles only print 10 rows and only the columns that will fit on screen (sometimes abbreviated). Remaining/unabbreviated column names are printed below the 10 rows. Color is used in printing (in the Console) to highlight certain facets of information.

#### 3.6.4 Subsetting

Dataframe subsetting has two undesireable--in Hadley's opinion--features:

1. Selecting a single variable returns a vector by default
2. When using dollar sign notation on a column that doesn't exist it'll silently perform partial string matching or return `NULL`

Tibbles don't do either of these things (i.e., always return another tibble and print a warning if searching for a column that doesn't appear to exist).

#### 3.6.5 Testing & Coercing

Same as other data types: `is.data.frame()`, `as.data.frame()`, `is.tibble`, and `as.tibble`.

#### 3.6.6 List Columns

Dataframes and tibbles support columns that are lists (because a dataframe is a list of vectors and can therefore contain other lists). Tibbles print them more cleanly

#### 3.6.7 Matrix & Dataframe Columns

Matrix columns in a dataframe are also supported but the `NROW()` must be equal to the `length()`.

#### 3.6.8 Exercises

1. Can you have a data frame with zero rows? What about zero columns?

[You can have a dataframe with zero rows so long as there are also zero columns. You cannot have a dataframe with zero columns (and a nonzero number of rows) because having columns of a consistent length is intrinsic to our definition of a dataframe]{.answer}

```{r 03-df-tbl_a1}
data.frame()
```

2. What happens if you attempt to set rownames that are not unique?

[You get both an error and a warning. They are as follows: ]{.answer}

```{r 03-df-tbl_a2}
## Error in `.rowNamesDF<-`(x, value = value) : 
##  duplicate 'row.names' are not allowed
## In addition: Warning message:
## non-unique value when setting 'row.names': â€˜aâ€™
```

3. If `df` is a data frame, what can you say about `t(df)`, and `t(t(df))`? Perform some experiments, making sure to try different column types.

[If `t(df)` works then so should `t(t(df))`. This should only work if the dataframe is symmetric and all of the same type (because it will essentially be coerced into a matrix by transposing it).]{.answer}

4. What does `as.matrix()` do when applied to a data frame with columns of different types? How does it differ from `data.matrix()`?

[`as.matrix()` follows the atomic vector type coercion rules before creating a matrix out of the dataframe. `data.matrix()` instead coerces everything into numeric data before creating a matrix. Though how `data.matrix()` "decides" what to coerce a particular value is not clear and seems to just be simply replacing values with their row numbers.]{.answer}

```{r 03-tbl-df_a4}
df <- data.frame(a = 1:3, b = c("d", "e", "f"), c = 7:9)

as.matrix(df)

data.matrix(df)
```

### 3.7 `NULL`

`NULL` is a special data type that is always length 0 and cannot support attributes. It can be tested for with `is.null()`. `NULL` is also returned by using `c()` without supplying anything to the parentheses (representing an empty vector).

This differs importantly from `NA` in two important ways:

1. `NA` is used to represent an empty _element_ of a vector rather than an entirely empty vector
2. `NA` has a type that matches one of the atomic vector types. **`NULL` is its own type**
