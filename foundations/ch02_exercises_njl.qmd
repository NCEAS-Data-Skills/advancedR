---
title: "Chapter 2: Names & Values -- Exercises"
author: "Nick J Lyon"
format: html
engine: knitr
code-overflow: wrap
---

```{r libs}
#| echo: false
#| message: false

# Install/load needed libraries
## install.packages("librarian")
librarian::shelf(lobstr, bench)
```

```{scss custom-themes, echo=FALSE}
.answer { 
  color: #560bad;
  font-weight: bolder;
}
```

## Binding Basics

1. Explain the relationship between `a`, `b`, `c`, and `d` in the following code:

```{r 02-bind-ex_q1}
a <- 1:10
b <- a
c <- b
d <- 1:10
```

[`a`, `b`, and `c` are all different names for the same object. Despite containing the same values, `d` is a name for a different object.]{.answer}

```{r 02-bind-ex_a1}
lobstr::obj_addr(x = a); lobstr::obj_addr(x = b); lobstr::obj_addr(x = c)
lobstr::obj_addr(x = d)
```

2. The following code accesses the mean function in multiple ways. Do they all point to the same underlying function object? Verify this with `lobstr::obj_addr()`.

```{r 02-bind-ex_q2}
#| eval: false
mean
base::mean
get("mean")
evalq(mean)
match.fun("mean")
```

[They do all point at the same function. This is supported by the fact they share memory addresses.]{.answer}

```{r 02-bind-ex_a2}
lobstr::obj_addr( x = mean ); lobstr::obj_addr( x = base::mean ); lobstr::obj_addr( x = get("mean") ); lobstr::obj_addr( x = evalq(mean) ); lobstr::obj_addr( x = match.fun("mean") )
```

3. By default, base R data import functions, like `read.csv()`, will automatically convert non-syntactic names to syntactic ones. Why might this be problematic? What option allows you to suppress this behaviour?

[This is problematic when crucial information is contained in the invalid characters. For instance, a column might have a percent symbol (`%`) to indicate the units of the column but the syntactically valid variant of the column would lose that unit information. This behavior can be turned off by the `check.names` argument of `read.csv`.]{.answer}

4. What rules does `make.names()` use to convert non-syntactic names into syntactic ones?

[Invalid characters are replaced by periods, an "X" is prepended if necessary, and reserved words have a period preprended. Missing values are replaced with "NA". If `unique = TRUE` then numbers will be appended to non-unique names (after being made syntactic).]{.answer}

5. I slightly simplified the rules that govern syntactic names. Why is `.123e1` not a syntactic name? Read `?make.names` for the full details.

[It evaluates to a number in scientific notation (`1.23`). `make.names` preprends an "X" to make it syntactically valid]{.answer}

## Copy-on-Modify

1. Why is `tracemem(1:10)` not useful?

[Because no name is bound to those values so no persistent computer memory is allocated.]{.answer}

2. Explain why `tracemem()` shows two copies when you run this code. Hint: carefully look at the difference between this code and the code shown earlier in the section.

```{r 02-copy-mod-ex_q2}
#| eval: false

x <- c(1L, 2L, 3L)
tracemem(x)

x[[3]] <- 4
```

[`tracemem()` shows two copies because the `x` list was modified directly (instead of copied then subsequently modified as done earlier in the section). This means that both copies share memory addresses for the first two elements but differ for the third.]{.answer}

3. Sketch out the relationship between the following objects:

```{r 02-copy-mod-ex_q3}
a <- 1:10
b <- list(a, a)
c <- list(b, a, 1:10)
```

[`a` is bound to an object containing the integers between 1 and 10. `b` contains two references to the same memory address to which `a` refers. `c` contains one three references to the object to which `a` refers as well as a second, separate memory address for the _new_ object of the integers between 1 and 10.]{.answer}

```{r 02-copy-mod-ex_a3}
lobstr::ref(a)
lobstr::ref(b)
lobstr::ref(c)
```

4. What happens when you run this code? Draw a picture.

```{r 02-copy-mod-ex_q4}
x <- list(1:10)
x[[2]] <- x
```

[The first line creates a one-element list of the integers between 1 and 10 and binds that object to the name `x`. The second line copies the original list and adds a second element that is contains bindings to both the original list and the object actually containing the numbers.]{.answer}

```{r 02-copy-mod-ex_a4}
lobstr::ref(x)
```

## Object Size

1.In the following example, why are `object.size(y)` and `obj_size(y)` so radically different? Consult the documentation of `object.size()`.

```{r 02-size-ex_q1}
y <- rep(list(runif(1e4)), 100)

object.size(y)
lobstr::obj_size(y)
```

[I think it's due to the difference between "SI units" and "IEC units".]{.answer}

2. Take the following list. Why is its size somewhat misleading?

```{r 02-size-ex_q2}
funs <- list(mean, sd, var)
obj_size(funs)
```

[Because it contains references to functions that themselves refer to internal C code.]{.answer}

3. Predict the output of the following code:

```{r 02-size-ex_q3}
#| eval: false
#| code-line-numbers: true

a <- runif(1e6)
obj_size(a)

b <- list(a, a)
obj_size(b)
obj_size(a, b)

b[[1]][[1]] <- 10
obj_size(b)
obj_size(a, b)

b[[2]][[1]] <- 10
obj_size(b)
obj_size(a, b)
```

[`a` and `b` (line 4 version) both contain bindings to the same underlying object so lines 2, 5, and 6 will return basically the same value. \n `b` (line 8 ver.) contains the original object as well as a modified version of the object. Therefore, lines 9 and 10 should return the same value but that value will be double that of lines 2, 5, and 6. \n `b` (line 12 ver.) contains two objects of equivalent size to `a` though neither _is_ `a`. So, line 13 will return the same value as lines 9 and 10 but line 14 will return that value + 50% (i.e., triple the size reported by lines 2, 5, and 6) ]{.answer}

## Modify-in-Place

1. Explain why the following code doesn't create a circular list.

```{r 02-mod-place-note_q1}
#| eval: false

x <- list()
x[[1]] <- x
```

[You don't get a circular list because the ability of an object or reference itself is unique to environment objects.]{.answer}

2. Wrap the two methods for subtracting medians into two functions, then use the `bench` package to carefully compare their speeds. How does performance change as the number of columns increase?

```{r 02-mod-place-note_a2-p1}
# Define first function
df_fxn <- function(obj, stat){
  
  # Duplicate object
  obj2 <- obj
  
  # Subract given stat from each 
  for (i in seq_along(stat)) {
    obj2[[i]] <- obj2[[i]] - stat[[i]]
  }

  # Return result
  return(as.list(obj2))
}

# Define second function
list_fxn <- function(obj, stat){
  
  # Make the object a list
  obj2 <- as.list(obj)
  
  # Subract given stat from each 
  for (i in seq_along(stat)) {
    obj2[[i]] <- obj2[[i]] - stat[[i]]
  }

  # Return result
  return(obj2)
}

# Create needed objects
x <- data.frame(matrix(runif(5 * 1e4), ncol = 5))
medians <- vapply(x, median, numeric(1))

# Invoke both functions
timings <- bench::mark(
  df_fxn(obj = x, stat = medians),
  list_fxn(obj = x, stat = medians)
)

# Check results
summary(timings)
```

Check again with more columns to check for changing efficiency/scalability.

```{r 02-mod-place-note_a2-p2}
# Create needed objects
x <- data.frame(matrix(runif(5 * 1e4), ncol = 10))
medians <- vapply(x, median, numeric(1))

# Invoke both functions
timings2 <- bench::mark(
  df_fxn(obj = x, stat = medians),
  list_fxn(obj = x, stat = medians)
)

# Check results
summary(timings2)
```

[When you run the two functions on just five columns the performance of the dataframe function is worse (about 2x the median completion time). If you double the number of columns you get a near tripling of completion time for the dataframe-based function while the list-based one gets only marginally slower.]{.answer}

3. What happens if you attempt to use tracemem() on an environment?

[You get the following error: `'tracemem' is not useful for promise and environment objects`]{.answer}





